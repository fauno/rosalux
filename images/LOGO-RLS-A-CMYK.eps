%!PS-Adobe-2.0 EPSF-1.2%%Creator: QuarkXPress(R) 7.5%%Title: LOGO-RLS- (Page 2)%%CreationDate: 29.09.2009 0:16 Uhr%%DocumentProcSets: QuarkXPress_EPS_7.5 1.0 0%%+ QuarkXPress_EPS_Separation 3.3 1 0%%DocumentSuppliedProcSets: QuarkXPress_EPS_7.5 1.0 0%%+ QuarkXPress_EPS_Separation 3.3 1 0%%DocumentProcessColors: Magenta Yellow%%CMYKProcessColor: 1 1 1 1 ([Passkreuze])%%DocumentSuppliedResources: (atend)%%DocumentNeededResources: (atend)%%DocumentData: Binary%%LanguageLevel: 2 %%BoundingBox: 0 0 440 312 %%HiResBoundingBox: 0 0 439.37 311.811 %%EndCommentsuserdict /xbldct60 80 dict dup begin put/llge3 /languagelevel where {pop languagelevel}{1} ifelse 3 ge def/setpacking where dup{exch pop currentpacking exch true setpacking}if/T true def/F false def/B {bind def} bind def/X {exch def} B/m /moveto load def/l /lineto load def/rl /rlineto load def/g /gsave load def/G /grestore load def/np /newpath load def/cp /closepath load def/H /setgray load def/n /stroke load def/o /setlinewidth load def/a /setlinecap load def/p /setdash load def/p2 {pop pop} B/p3 {pop pop pop} B/p4 {pop pop pop pop} B/mtx matrix def/@0 0 def /@1 0 def/c0 0 def /m0 0 def /y0 0 def /k0 0 def/c1 0 def /m1 0 def /y1 0 def /k1 0 def/cstp 0 def /mstp 0 def /ystp 0 def /kstp 0 def/blmode 0 def/blf 0 def/blstp 0 def/blw 0 def/cmykf 0 def/cs [/DeviceGray] def/llge2 /languagelevel where {pop languagelevel}{1} ifelse 2 ge def/minblnd 16 def/QRKdisableIR where {pop}{userdict /QRKdisableIR true put} ifelsellge3 QRKdisableIR and{ /disableIR {  currentuserparams /IdiomRecognition get  (<<) cvx exec /IdiomRecognition false (>>) cvx exec setuserparams } B /restoreIR {  (<<) cvx exec /IdiomRecognition 3 -1 roll (>>) cvx exec  setuserparams } B}{ /disableIR {} B /restoreIR {} B}ifelsedisableIR/isgrayspace{ /qxpcid where {/qxpcid get 0 gt}{F} ifelse} B/setcustomcolor where{ pop /dogray {  isgrayspace  {pop T}  {   gsave   4 get [.5 .5 .5 0 6 -1 roll] .5 setcustomcolor   {currentcolorspace} stopped   {currentgray dup 1 eq exch 0 eq or}   {    0 get /Separation eq {currentcolor}{currentgray} ifelse    dup 1 eq exch 0 eq or   }   ifelse   grestore  }  ifelse } B}{ /dogray {pop isgrayspace} B /setcustomcolor {  exch aload pop pop 4 {4 index mul 4 1 roll} repeat  setcmykcolor pop } B} ifelse/setseparationgray where{pop /doregblnd T def /sepgr {setseparationgray} B}{/doregblnd F def /sepgr systemdict /setgray get def}ifelse/getgray{ {currentcolorspace} stopped {currentgray} {  0 get /Separation eq {1 currentcolor sub}{currentgray} ifelse } ifelse} B/setsepval{ dup -1 eq {pop aload pop setcmykcolor}{setcustomcolor} ifelse getgray} B/setsepvalrgb{ dup -1 eq {pop aload pop setrgbcolor}{setcustomcolorrgb} ifelse getgray} B/setcompval{ dup -1 eq {pop aload pop} {exch aload p2 4 {4 index mul 4 1 roll} repeat 5 -1 roll pop} ifelse} B/setcompvalrgb{ dup -1 eq {pop aload pop} {  exch aload p2  3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat  4 -1 roll pop } ifelse} B/calcbnd{ llge2 {256} {  72 72 mtx defaultmatrix dtransform abs exch abs 2 copy  lt {exch} if pop  /currentcolorscreen where  {   pop currentcolorscreen p2   3 {3 index 2 copy lt {exch} if 5 1 roll p4} repeat  }  {currentscreen p2}  ifelse  div dup mul round cvi 15 add 16 idiv dup 1 lt {pop 1} if  16 mul dup 256 gt {pop 256} if } ifelse minblnd 2 copy lt {exch} if pop /maxblnd X} B/blar[ {dup neg -128 m 0 256 rl dup add 0 rl 0 -256 rl cp} bind {dup neg dup m dup add 0 1 index rl dup 0 rl 0 exch neg rl cp} bind {dup neg dup 0 exch m 0 l dup 0 exch l 0 l cp} bind {0 0 3 -1 roll 0 360 arc cp} bind {dup mul dup add sqrt 0 0 3 -1 roll 0 360 arc cp} bind] def/grayfunc(<<) cvx exec /FunctionType 2 /Domain [0 1] /C0 0/C1 0 /N 1(>>) cvx exec def/cmykfunc(<<) cvx exec /FunctionType 2 /Domain [0 1] /C0 [0 0 0 0] /C1 [0 0 0 0] /N 1(>>) cvx exec def/rgbfunc(<<) cvx exec /FunctionType 2 /Domain [0 1] /C0 [0 0 0] /C1 [0 0 0] /N 1(>>) cvx exec def/labfunc(<<) cvx exec/FunctionType 2 /Domain [0 1]/C0 [0 0 0] /C1 [0 0 0] /N 1(>>) cvx exec def/dnfunc(<<) cvx exec /FunctionType 2 /Domain [0 1] /C0 0 /C1 0 /N 1(>>) cvx exec def/symgrayfunc(<<) cvx exec /FunctionType 3 /Domain [0 1] /Functions [grayfunc grayfunc] /Bounds [.5] /Encode 0(>>) cvx exec def/symcmykfunc(<<) cvx exec /FunctionType 3 /Domain [0 1] /Functions [cmykfunc cmykfunc] /Bounds [.5] /Encode 0(>>) cvx exec def/symrgbfunc(<<) cvx exec /FunctionType 3 /Domain [0 1] /Functions [rgbfunc rgbfunc] /Bounds [.5] /Encode 0(>>) cvx exec def/symlabfunc(<<) cvx exec/FunctionType 3 /Domain [0 1]/Functions [labfunc labfunc] /Bounds [.5] /Encode 0(>>) cvx exec def/symdnfunc(<<) cvx exec /FunctionType 3 /Domain[0 1] /Functions [dnfunc dnfunc] /Bounds [.5] /Encode 0(>>) cvx exec def/axlshd(<<) cvx exec /ShadingType 2 /ColorSpace 0 /Function 0 /Coords [-128 0 128 0](>>) cvx exec def/midshd(<<) cvx exec /ShadingType 2 /ColorSpace 0 /Function 0 /Coords [-128 0 128 0](>>) cvx exec def/radshd(<<) cvx exec /ShadingType 3 /ColorSpace 0 /Function 0 /Coords [0 0 0 0 0 0](>>) cvx exec def/sqrshd(<<) cvx exec /ShadingType 4 /ColorSpace 0 /Function 0 /BitsPerCoordinate 8 /BitsPerComponent 8 /BitsPerFlag 8 /DataSource <  00 80 80 FF 00 00 FF 00 00 FF FF 00  02 FF 00 00 02 00 00 00 02 00 FF 00 > /Decode [-128 128 -128 128 0 1](>>) cvx exec def/dmndshd(<<) cvx exec /ShadingType 4 /ColorSpace 0 /Function 0 /BitsPerCoordinate 8 /BitsPerComponent 8 /BitsPerFlag 8 /DataSource < 00 00 FF 00 00 FF FF 00 00 00 00 00 01 FF 00 00 00 80 80 FF 00 80 FF 00 00 FF 80 00 02 80 00 00 02 00 80 00 02 80 FF 00 > /Decode [-128 128 -128 128 0 1](>>) cvx exec defllge3{ 0 setsmoothness /shdf {  blf -1 eq {//axlshd} if  blf 0 eq {//midshd} if  blf 1 eq {//sqrshd} if  blf 2 eq {//dmndshd} if  blf 3 eq {//radshd dup /Coords get 2 128 put} if  blf 4 eq {//radshd dup /Coords get 2 181 put} if } B /cb {  /blmode X /blf X blmode 2 eq  {/k1 X /y1 X /m1 X /c1 X /k0 X /y0 X /m0 X /c0 X}  {/k1 X /k0 X}  ifelse  g 128 128 translate np 128 blar 1 get exec  blmode 2 eq  {   c0 m0 y0 k0 setcmykcolor  }  {k0 H}  ifelse  fill  blmode 2 eq  {   //cmykfunc /C0 get dup 0 c0 put dup 1 m0 put dup 2 y0 put 3 k0 put   //cmykfunc /C1 get dup 0 c1 put dup 1 m1 put dup 2 y1 put 3 k1 put  }  {//grayfunc dup /C0 k0 put /C1 k1 put}  ifelse  shdf  dup /ColorSpace blmode 2 eq {/DeviceCMYK}{/DeviceGray} ifelse put  dup /Function blmode 2 eq  {   blf -1 eq   {//symcmykfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symcmykfunc dup /Encode [0 1 1 0] put}{//cmykfunc}    ifelse   }   ifelse  }  {   blf -1 eq   {//symgrayfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symgrayfunc dup /Encode [0 1 1 0] put}{//grayfunc}    ifelse   }   ifelse  }  ifelse put  shfill G } B /product where {/product get}{(Unknown)} ifelse (LaserWriter-Sim) ne { /QuarkXPressBlends (<<) cvx exec  /blnd312  [   {dup/docbl X{/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse    k1 k0/@1 X/@2 X docbl{@2 @1 sub abs c1 c0 sub abs 2 copy lt    {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt    {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if    @1 @2 docbl{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if    sub maxblnd mul round cvi dup dup/blstp X 0 eq{pop 1}if    /blw 256 blstp 1 add div def/kstp k1 k0 sub 2 index div def    docbl{/cstp c1 c0 sub 2 index div def/mstp m1 m0 sub 2 index div def    /ystp y1 y0 sub 2 index div def}if pop gsave np []0 setdash 0 setlinecap    blw dup dup devpxwd dup add add setlinewidth 2 div blstp 1 add    docbl{{c0 m0 y0 k0 setcmykcolor dup 0 m 0 256 rl stroke 1 index add    /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}    {{k0 setgray dup 0 m 0 256 rl stroke 1 index add/k0 k0 kstp add def}repeat    }ifelse p2 grestore} bind   {xbldct60 begin -1 exch {2}{0} ifelse cb end} bind  ]  /blnd332  [   {dup/blmode X 2 eq{/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse    k1 k0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs c1 c0 sub abs 2 copy lt    {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt    {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if    @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if    sub maxblnd mul round cvi dup dup/blstp X 0 eq{pop 1}if    /blw 256 blstp 1 add div def/kstp k1 k0 sub 2 index div def    blmode 2 eq{/cstp c1 c0 sub 2 index div def/mstp m1 m0 sub 2 index div def    /ystp y1 y0 sub 2 index div def}if pop g np[]0 p 0 a    blw dup dup devpxwd dup add add o 2 div blstp 1 add    blmode 2 eq{{c0 m0 y0 k0 setcmykcolor dup 0 m 0 256 rl n 1 index add    /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}    {{k0 blmode 0 eq{H}{sepgr}ifelse dup 0 m 0 256 rl n 1 index add/k0 k0 kstp add def}repeat    }ifelse p2 G} bind   {xbldct60 begin -1 exch cb end} bind  ]  /xblnd1  [   {/docbl X/blf X docbl{/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse    k1 k0/@1 X/@2 X docbl{@2 @1 sub abs c1 c0 sub abs 2 copy lt    {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt    {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if    @1 @2 docbl{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if    sub/blstp exch/maxblnd where{pop}{calcbnd}ifelse maxblnd mul round cvi def    blstp 0 ne{/blw 128 blstp 1 add div def/kstp k1 k0 sub blstp div def    docbl{/cstp c1 c0 sub blstp div def/mstp m1 m0 sub blstp div def    /ystp y1 y0 sub blstp div def}if}if gsave 128 128 translate np    docbl{c0 m0 y0 k0 setcmykcolor}{k0 setgray}ifelse 128 blar 1 get exec fill    blstp 0 ne{blw 128 blar blf get blstp 1 add    docbl{{c0 m0 y0 k0 setcmykcolor 2 copy exec fill exch 2 index sub exch    /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}    {{k0 setgray 2 copy exec fill exch 2 index sub exch/k0 k0 kstp add def}repeat}ifelse    p3}if grestore} bind   {xbldct60 begin {2}{0} ifelse cb end}bind  ]  /xblnd2  [   {/blmode X/blf X blmode 2 eq{/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse    k1 k0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs c1 c0 sub abs 2 copy lt    {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt    {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if    @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if    sub/blstp exch/maxblnd where{pop}{calcbnd}ifelse maxblnd mul round cvi def    blstp 0 ne{/blw 128 blstp 1 add div def/kstp k1 k0 sub blstp div def    blmode 2 eq{/cstp c1 c0 sub blstp div def/mstp m1 m0 sub blstp div def    /ystp y1 y0 sub blstp div def}if}if gsave 128 128 translate newpath    blmode 2 eq{c0 m0 y0 k0 setcmykcolor}{k0 blmode 0 eq{H}{sepgr}ifelse}ifelse    128 blar 1 get exec fill blstp 0 ne{blw 128 blar blf get blstp 1 add    blmode 2 eq{{c0 m0 y0 k0 setcmykcolor 2 copy exec fill exch 2 index sub exch    /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}    {{k0 blmode 0 eq{setgray}{sepgr}ifelse 2 copy exec fill exch 2 index sub exch    /k0 k0 kstp add def}repeat}ifelse p3}if grestore} bind   {xbldct60 begin cb end} bind  ]  /xblend3  [   {/blmode X/blf X blmode 2 eq{/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse   k1 k0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs c1 c0 sub abs 2 copy lt   {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt   {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if   @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if   sub/blstp exch/maxblnd where{pop}{calcbnd}ifelse maxblnd mul round cvi def   blstp 0 ne{/blw 128 blstp 1 add div def/kstp k1 k0 sub blstp div def   blmode 2 eq{/cstp c1 c0 sub blstp div def/mstp m1 m0 sub blstp div def   /ystp y1 y0 sub blstp div def}if}if gsave 128 128 translate newpath   blmode 2 eq{c0 m0 y0 k0 setcmykcolor}{k0 blmode 0 eq{setgray}{sysH}ifelse}ifelse   128 blar 1 get exec fill blstp 0 ne{blw 128 blar blf get blstp 1 add   blmode 2 eq{{c0 m0 y0 k0 setcmykcolor 2 copy exec fill exch 2 index sub exch   /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}   {{k0 blmode 0 eq{setgray}{sysH}ifelse 2 copy exec fill exch 2 index sub exch   /k0 k0 kstp add def}repeat}ifelse p3}if grestore} bind   {xbldct60 begin cb end} bind  ]  /xblnd5  [   {turnoffidiomrecognition /blmode X/blf X blmode 2 eq{/k1 X/y1 X/m1 X/c1 X    /k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse    k1 k0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs c1 c0 sub abs 2 copy lt    {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt    {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if    @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if    sub/blstp exch/maxblnd where{pop}{calcbnd}ifelse maxblnd mul round cvi def    blstp 0 ne{/blw 128 blstp 1 add div def/kstp k1 k0 sub blstp div def    blmode 2 eq{/cstp c1 c0 sub blstp div def/mstp m1 m0 sub blstp div def    /ystp y1 y0 sub blstp div def}if}if gsave 128 128 translate newpath    blmode 2 eq{c0 m0 y0 k0 setcmykcolor}{k0 blmode 0 eq{setgray}{sepgr}ifelse}ifelse    128 blar 1 get exec fill blstp 0 ne{blw 128 blar blf get blstp 1 add    blmode 2 eq{{c0 m0 y0 k0 setcmykcolor 2 copy exec fill exch 2 index sub exch    /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat}    {{k0 blmode 0 eq{setgray}{sepgr}ifelse 2 copy exec fill exch 2 index sub exch    /k0 k0 kstp add def}repeat}ifelse p3}if grestore resetidiomrecognition} bind   {xbldct60 begin cb end} bind  ] (>>) cvx exec /IdiomSet defineresource pop } if} if /CoolSetColorSpace { dup setcolorspace /cs X } Bllge3{ /xblnd {  /blmode X /blf X blmode 2 eq  {/k1 X /y1 X /m1 X /c1 X /k0 X /y0 X /m0 X /c0 X}  {/k1 X /k0 X}  ifelse  g 128 128 translate np 128 blar 1 get exec  blmode 2 eq  {   c0 m0 y0 k0 setcmykcolor  }  {k0 H}  ifelse  fill  blmode 2 eq  {   //cmykfunc /C0 get dup 0 c0 put dup 1 m0 put dup 2 y0 put 3 k0 put   //cmykfunc /C1 get dup 0 c1 put dup 1 m1 put dup 2 y1 put 3 k1 put  }  {//grayfunc dup /C0 k0 put /C1 k1 put}  ifelse  shdf  dup /ColorSpace blmode 2 eq {/DeviceCMYK}{/DeviceGray} ifelse put  dup /Function blmode 2 eq  {   blf -1 eq   {//symcmykfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symcmykfunc dup /Encode [0 1 1 0] put}{//cmykfunc}    ifelse   }   ifelse  }  {   blf -1 eq   {//symgrayfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symgrayfunc dup /Encode [0 1 1 0] put}{//grayfunc}    ifelse   }   ifelse  }  ifelse put  shfill G } B /xblndrgb {  /blmode X /blf X blmode 2 eq  {/b1 X /g1 X /r1 X /b0 X /g0 X /r0 X}{/b1 X /b0 X} ifelse  g 128 128 translate np 128 blar 1 get exec  blmode 2 eq  {   r0 g0 b0 setrgbcolor  }  {k0 H}  ifelse  fill  blmode 2 eq  {   //rgbfunc /C0 get dup 0 r0 put dup 1 g0 put 2 b0 put   //rgbfunc /C1 get dup 0 r1 put dup 1 g1 put 2 b1 put  }  {//grayfunc dup /C0 b0 put /C1 b1 put}  ifelse shdf  dup /ColorSpace blmode 2 eq {/DeviceRGB}{/DeviceGray} ifelse put  dup /Function blmode 2 eq  {   blf -1 eq   {//symrgbfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symrgbfunc dup /Encode [0 1 1 0] put}{//rgbfunc}    ifelse   }   ifelse  }  {   blf -1 eq   {//symgrayfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symgrayfunc dup /Encode [0 1 1 0] put}{//grayfunc}    ifelse   }   ifelse  }  ifelse put  shfill G } B /xblndcie {  /blmode X /blf X /cs X blmode 4 eq  {/g1 X /f1 X /e1 X /d1 X /g0 X /f0 X /e0 X /d0 X}  {   blmode 3 eq   {/c1 X /b1 X /a1 X /c0 X /b0 X /a0 X}   {/a1 X /a0 X}ifelse  }  ifelse  g 128 128 translate np 128 blar 1 get exec  blmode 4 eq  {   d0 e0 f0 g0 cs setcolorspace setcolor  }  {   blmode 3 eq   {    a0 b0 c0 cs setcolorspace setcolor   }   {    a0 cs setcolorspace setcolor   }   ifelse  }  ifelse  fill  blmode 4 eq  {   //cmykfunc /C0 get dup 0 d0 put dup 1 e0 put dup 2 f0 put 3 g0 put   //cmykfunc /C1 get dup 0 d1 put dup 1 e1 put dup 2 f1 put 3 g1 put  }  {   blmode 3 eq   {    //labfunc /C0 get dup 0 a0 put dup 1 b0 put 2 c0 put    //labfunc /C1 get dup 0 a1 put dup 1 b1 put 2 c1 put   }   {    //grayfunc dup /C0 a0 put /C1 a1 put   }   ifelse  }  ifelse  shdf  dup /ColorSpace cs put  dup /Function blmode 4 eq  {   blf -1 eq   {//symcmykfunc dup /Encode [0 .5 .5 1] put}   {    blf 0 eq    {//symcmykfunc dup /Encode [0 1 1 0] put}{//cmykfunc}    ifelse   }   ifelse  }  {   blmode 3 eq   {    blf -1 eq    {//symlabfunc dup /Encode [0 .5 .5 1] put}    {     blf 0 eq     {//symlabfunc dup /Encode [0 1 1 0] put}     {//labfunc}     ifelse    }    ifelse   }   {    blf -1 eq    {//symgrayfunc dup /Encode [0 .5 .5 1] put}    {     blf 0 eq     {//symgrayfunc dup /Encode [0 1 1 0] put}     {//grayfunc}     ifelse    }    ifelse   }   ifelse  }  ifelse put  shfill G } B}{ /xblnd {  1 index -1 eq  {exch pop blnd}  {   /blmode X /blf X   blmode 2 eq   {/k1 X /y1 X /m1 X /c1 X /k0 X /y0 X /m0 X /c0 X}   {/k1 X /k0 X}   ifelse   /@1 k1 def /@0 k0 def blmode 2 eq   {    @0 @1 sub abs c1 c0 sub abs    2 copy lt {exch /@1 c1 def /@0 c0 def} if    pop m1 m0 sub abs    2 copy lt {exch /@1 m1 def /@0 m0 def} if    pop y1 y0 sub abs lt {/@1 y1 def /@0 y0 def} if   } if   /blstp @1 @0 sub abs   currentdict /maxblnd known not {calcbnd} if   maxblnd mul round cvi def   blstp 0 ne   {    /blw 128 blstp 1 add div def    /kstp k1 k0 sub blstp div def    blmode 2 eq    {     /cstp c1 c0 sub blstp div def     /mstp m1 m0 sub blstp div def     /ystp y1 y0 sub blstp div def    } if   } if   g 128 128 translate np   blmode 2 eq   {c0 m0 y0 k0 setcmykcolor}   {k0 blmode 0 eq {H}{sepgr} ifelse}   ifelse   128 blar 1 get exec fill blstp 0 ne   {    blw 128 blar blf get blstp 1 add    blmode 2 eq    {     {      c0 m0 y0 k0 setcmykcolor 2 copy exec fill      exch 2 index sub exch      /c0 c0 cstp add def /m0 m0 mstp add def      /y0 y0 ystp add def /k0 k0 kstp add def     } repeat    }    {     {      k0 blmode 0 eq {H}{sepgr} ifelse      2 copy exec fill exch 2 index sub exch      /k0 k0 kstp add def     } repeat    } ifelse    p3   } if   G  }  ifelse } B /xblndrgb {  1 index -1 eq  {exch pop blndrgb}  {   /blmode X /blf X   blmode 2 eq   {/b1 X /g1 X /r1 X /b0 X /g0 X /r0 X}   {/b1 X /b0 X}   ifelse   /@1 b1 def /@0 b0 def blmode 2 eq   {    @0 @1 sub abs r1 r0 sub abs    2 copy lt {exch /@1 r1 def /@0 r0 def} if    pop g1 g0 sub abs lt {/@1 g1 def /@0 g0 def} if   } if   /blstp @1 @0 sub abs   currentdict /maxblnd known not {calcbnd} if   maxblnd mul round cvi def   blstp 0 ne   {    /blw 128 blstp 1 add div def /bstp b1 b0 sub blstp div def    blmode 2 eq    {     /rstp r1 r0 sub blstp div def     /gstp g1 g0 sub blstp div def    }    if   }   if   g 128 128 translate np   blmode 2 eq   {r0 g0 b0 setrgbcolor}   {b0 blmode 0 eq {H}{sepgr} ifelse}   ifelse   128 blar 1 get exec fill blstp 0 ne   {    blw 128 blar blf get blstp 1 add blmode 2 eq    {     {      r0 g0 b0 setrgbcolor 2 copy exec fill exch 2 index sub exch      /r0 r0 rstp add def /g0 g0 gstp add def /b0 b0 bstp add def     } repeat    }    {     {      b0 blmode 0 eq {H}{sepgr} ifelse      2 copy exec fill exch 2 index sub exch      /b0 b0 bstp add def     } repeat    }    ifelse    p3   }   if   G  }  ifelse } B}ifelse/dograyblnd{ dup -2 eq {  doregblnd  {exch dup length 1 sub get 1 exch sub exch T F}  {   pop dup length 6 eq   {dup 0 5 getinterval exch 5 get}{0 4 getinterval -1}   ifelse   T  }  ifelse } {T} ifelse {dup -1 eq {F}{1 index dogray} ifelse} if} B/xcustblnd{ 5 1 roll dograyblnd 5 -2 roll dograyblnd 4 -1 roll or {  dup -2 eq {pop}{setsepval} ifelse 3 1 roll  dup -2 eq {pop}{setsepval} ifelse 3 -1 roll 1 xblnd } {setcompval 6 -2 roll setcompval 9 -1 roll 2 xblnd} ifelse} B/dograyblndrgb{ dup -2 eq {  pop dup length 5 eq  {dup 0 4 getinterval exch 4 get}{0 3 getinterval -1}  ifelse } if} B/xcustblndrgb{ 5 1 roll dograyblndrgb 4 2 roll dograyblndrgb setcompvalrgb 5 -2 roll setcompvalrgb 7 -1 roll 2 xblndrgb} B/dnb{ shdf dup /ColorSpace cs put dup /Function blf -1 eq {//symdnfunc dup /Encode [0 .5 .5 1] put} {  blf 0 eq  {//symdnfunc dup /Encode [0 1 1 0] put}  {//dnfunc}  ifelse } ifelse put shfill} B/dnscs{ dup length 3 1 roll [3 index 5 add 3 roll inkmul] 3 1 roll [/DeviceN 3 -1 roll /DeviceCMYK 5 -1 roll dntocmykf] CoolSetColorSpace} B/SetSepCSAltRGB{ dup length 3 1 roll [3 index 5 add 3 roll inkmul] 3 1 roll [  /Separation 3 -1 roll aload pop /DeviceRGB 5 -1 roll  aload pop aload pop rgbmulf ] CoolSetColorSpace} B/SetSepCSAltLAB{ dup length 3 1 roll [3 index 5 add 3 roll inkmul] 3 1 roll [  /Separation 3 -1 roll aload pop LABColorSpace 5 -1 roll  aload pop aload pop labmulf ] CoolSetColorSpace} B/blenddn{ g /blf X dup /altCS X -2 eq {  llge3  {   [/Separation (All) /DeviceCMYK {0 0 0 4 -1 roll}]   CoolSetColorSpace   //dnfunc dup /C0 [5 index] put 3 -1 roll setcolor   128 128 translate np 128 blar 1 get exec   /C1 [4 -1 roll] put	fill   dnb  }  {   [0 0 0 5 -1 roll dup] -2 [0 0 0 7 -1 roll dup] -2 4 2 roll blf   xcustblnd  }  ifelse } {  ] dup length 3 add 1 roll  llge3  {   altCS dup -1 eq   {pop dnscs}   {-4 eq {SetSepCSAltLAB}{SetSepCSAltRGB} ifelse}   ifelse   //dnfunc dup /C0 3 index put exch aload pop setcolor   128 128 translate np 128 blar 1 get exec exch   [exch aload pop counttomark 1 sub inkmul] exch   /C1 3 -1 roll put   fill   dnb  }  {   dup length 3 1 roll mark 3 index 5 add 3 roll   inkmul counttomark 3 add -3 roll pop   pop dntocmykf /cmykf X cmykf 5 -1 roll   [exch aload pop counttomark 1 sub inkmul cmykf] aload pop   blf 2 xblnd  }  ifelse } ifelse G} BrestoreIR{setpacking} ifend%%BeginProcSet: QuarkXPress_EPS_7.5 1.0 0/QuarkXPress_EPS_7.5 userdict exch 400 dict dup begin put/vmreclaim where {begin 0 vmreclaim end} if/setpacking where /pkng exch defpkng {pop /savepacking currentpacking def true setpacking} ifglobaldict /csacache known not{ currentglobal true setglobal globaldict /csacache 20 dict put setglobal}if/putcsa{ 1 index 0 get dup /CIEBasedDEFG eq exch /CIEBasedDEF eq or llge3 not and {exch} if pop globaldict /csacache get 3 1 roll put setglobal} bind def/getcsa {csacache exch get} bind def/T true def/F false def/B {bind def} bind def/X {exch def} B/m /moveto load def/rm /rmoveto load def/l /lineto load def/rl /rlineto load def/O /curveto load def/np /newpath load def/cp /closepath load def/z /setmatrix load def/t /translate load def/S /scale load def/g /gsave load def/G /grestore load def/H /setgray load def/R /setrgbcolor load def/v /fill load def/V /eofill load def/u /clip load def/U /eoclip load def/n /stroke load def/o /setlinewidth load def/a /setlinecap load def/b /setlinejoin load def/p /setdash load def/M /show load def/N /ashow load def/Q /awidthshow load def/Y /widthshow load def/vrbar [/u load /U load /v load /V load /n load] def/cps {{currentpoint} stopped} B/clrds{ countdictstack exch sub dup 0 gt {{end} repeat}{pop} ifelse} B/epS {/us save def countdictstack us mark} B/epR{ {cleartomark dup us eq {pop exit} if} loop clrds us restore} B/mif {{}{m} ifelse} B/mrl {g np m rl n G} B/L {g np m l n G} B/ldex {load exec} B/qA .166667 def/qB .833333 def/qC .5 def/pmx matrix def/imx matrix def/mtx matrix def/mtx1 matrix def/mx0 matrix def/mx1 matrix def/mx2 matrix def/mx3 matrix def/beginPgMtx matrix def/2t 2 array def/2a [0 0] def/6a 6 array def/a50 50 array def/p2 {pop pop} B/p3 {pop pop pop} B/p4 {pop pop pop pop} B/R0 {mx1 astore concat} B/R1 {mx0 currentmatrix pop R0} B/R2 {mx3 currentmatrix pop R0} B/llge2 /languagelevel where {pop languagelevel}{1} ifelse 2 ge def/llge3 /languagelevel where {pop languagelevel}{1} ifelse 3 ge def/llge3orseps where {pop}{/llge3orseps llge3 def} ifelsellge2{ /scs where {pop}{/scs /setcolorspace load def} ifelse /xpsc where {pop}{/xpsc /setcolor load def} ifelse /dupL {/dup load} B /mulL {/mul load} B /exchL {/exch load} B /rollL {/roll load} B /indexL {/index load} B /addL {/add load} B /subL {/sub load} B /popL {/pop load} B /gtL {/gt load} B /ifL {/if load} B} if/epnul{ 29 {0} repeat /a X /b X /C X /g X /G X /H X /l X /m X /M X /n X /N X /o X /O X /p X /Q X /R X /S X /t X /u X /U X /v X /V X /w X /Y X /z X /cp X /np X /rl X /rm X} B/findfont[ /findfont load {stopped {pop /Courier findfont} if} aload pop] cvx B/xpfindfont /findfont load def/IsArrayType {dup /arraytype eq exch /packedarraytype eq or} B/sp0{{abs exch abs 2 copy add 1 gt{1 sub dup mul exch 1 sub dup mul add 1 sub} {dup mul exch dup mul add 1 exch sub}ifelse}}B/sp1{{exch pop abs 1 exch sub}}B/sp2{{dup mul exch dup mul .4 mul add 1 exch sub}}B/sp3{{abs exch abs 2 copy gt{exch}if pop}}B/sp4{{1 add 4 mul cvi 8 mul exch 1 add 4 mul cvi add (\177_wW}]uUOoGgMmEesS{[qQyYCcKkAaIi|\\tT~^vVLlDdNnFfpPxXrRzZ@`HhBbJj) exch get 128 div}}B/sp8{exch 3 div exch{2{1 add 1.5 mul dup floor sub 2 mul 1 sub exch}repeat abs exch abs 2 copy add 1 gt{1 sub dup mul exch 1 sub dup mul add 1 sub} {dup mul exch dup mul add 1 exch sub}ifelse}}B/strtp{/ctp X setclp}B/endp{/ctp {} def setclp}B/kp{ct1 0 2 index length 2 index 99 2 index put getinterval copy cvx exec mtx1 currentmatrix pop cps np mif}B/ptc{ llge2 {/bkc2 [[currentcolor] currentcolorspace] def} {  cmykprsnt 1 clrspusd eq and  {currentcmykcolor 4}{currentrgbcolor 3}  ifelse  -1 1 {exch 255 mul cvi bkc 3 1 roll put} for } ifelse} B/gtc{ llge2 {bkc2 aload pop setcolorspace aload pop setcolor} {  1 1 cmykprsnt 1 clrspusd eq and {4}{3} ifelse  {bkc exch get 255 div} for  cmykprsnt 1 clrspusd eq and {setcmykcolor}{R} ifelse } ifelse} B/crntc{ regsh 0 lt custprsnt not and {  clrspusd 1 eq  {cmykprsnt {currentcmykcolor}{currentgray} ifelse}  {currentrgbcolor}  ifelse } if clrspusd 1 eq {custar}{custarrgb} ifelse aload p2 custsh custprsnt regsh} B/setc{ /regsh X /custprsnt X /custsh X custnamstr 0 1 index 79 get getinterval clrspusd 1 eq {custar}{custarrgb} ifelse astore pop regsh 0 ge {regsh setseparationgray} {  custprsnt  {   clrspusd 1 eq   {custar custsh setcustomcolor}   {custarrgb custsh setcustomcolorrgb}   ifelse  }  {   clrspusd 1 eq   {cmykprsnt {setcmykcolor}{H} ifelse}{setrgbcolor}   ifelse  }  ifelse } ifelse} B/shp{ dup 1 gt /@1 X vrbar exch get currentflat {  @1 {g} if {1 index exec} stopped @1 {G} if  {currentflat cvi 1 bitshift dup 200 gt {pop exit}{setflat} ifelse}  {@1 {np} if exit}  ifelse } loop setflat pop} B/h {currentpoint exch pop m} B/crs {g o np m l n np m l n G} B/mv where{pop}{/mv 256 array defmv 0/Helvetica findfont/Encoding get 0 128 getinterval putinterval39/quotesingle 96/grave2{mv 3 1 roll put}repeat/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USmv 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronmv 128 128 getinterval astore pop}ifelse/xpv mv def/strpn{ s75 cvs(|____)anchorsearch} Bstatusdict begin version cvr 47.0 ge end{/w /stringwidth load def}{/w {g np 0 0 0 0 m l cp u stringwidth G} B}ifelse/smc {m dup M} B/sos{ s75 cvs dup 1 79 put cvn} B/sss{ s75 cvs dup 2 83 put cvn} B/sbs{ s75 cvs dup 3 66 put cvn} B/sts{ tpamt 0 ne {  str cvs dup 4 84 put  tpamt 0 gt {(+) Concatenate} if  tpamt s75 cvs Concatenate cvn } if} B/Z{ /psy X /psx X curf psx 0 psx usangl {.212557 mul}{pop 0} ifelse psy neg 0 0 fmtx astore makefont setfont} B/f{ /psy X /psx X far exch get aload pop 1 and 0 ne /usangl X /xpReversePath X dup /curf X psx 0 psx usangl {.212557 mul}{pop 0} ifelse psy neg 0 0 fmtx astore makefont setfont} B/cf{ {  1 index /FID ne 2 index /UniqueID ne and {def}{p2} ifelse } forall} B/stlf{ 3 -1 roll newmm 3 1 roll p2} B/vtadj{dup/vtd X{90}{-90}ifelse rotate}B/CreateFontName{ 1 index 8 and 0 ne {1 index 16 and 0 ne {sss}{sos} ifelse} if 1 index 1 and 0 ne {sbs} if sts exch pop} B/Concatenate{ dup length 2 index length add string dup 0 4 index putinterval dup 4 -1 roll length 4 -1 roll putinterval} B/IsFontPresent{ /isXPFontName X exch not {  2 copy isXPFontName  {1 index 0 ne {CreateFontName}{strpn {pop exch pop} if} ifelse}  {   1 index 0 ne {75 string cvs (|____) exch Concatenate cvn} if   CreateFontName  }  ifelse  exch pop } if far {  dup null ne  {   0 get 2 copy /FontName get eq   {3 1 roll pop pop T exit}   {pop}   ifelse  }  {pop pop pop F exit}  ifelse } forall} B/chkPaintType{ dup /FontType get 0 eq {pop F}{/PaintType 2 copy known {get 0 ne}{p2 T} ifelse} ifelse} B/nwf{ count 1 roll dup maxlength 1 add dict begin cf FontType 0 ne {  encodeFlag 1 eq  {   /Encoding NewEncoding def  }  if } if currentdict end count -1 roll exch definefont pop} B/IsInsideOnRight{ dup -1 exch 0 exch /Encoding get {/hyphen eq {exch exit}{1 add} ifelse} forall pop dup 0 lt {pop pop F} {  1 string dup 0 4 -1 roll put  gsave   exch 100 scalefont setfont   newpath 0 0 moveto true charpath pathbbox 4 copy 4 copy   moveto currentpoint 4 1 roll 1 index lineto   lineto currentpoint pop exch lineto closepath   3 -1 roll sub 3 1 roll exch sub 2 div exch 2 div   6 2 roll pop pop 3 -1 roll add 3 1 roll add exch   infill  grestore } ifelse} B/IsMMFontInstance{ strpn {pop} if (_) search {  exch pop exch pop cvn xpfindfont  dup /FontInfo known  {   /FontInfo get   /BlendDesignMap known  }  {   pop F  }  ifelse } {  pop F } ifelse} B/dfnt{ /tpamt X /fNam X /fontStyle X fNam IsMMFontInstance {  globaldict /findfont known  {/findfont globaldict /findfont get def}  if } if dup /toDeriveFont X {/baseFont X} if dup /encodeFlag X 1 and 0 ne {/NewEncoding X} if toDeriveFont {  baseFont findfont fNam nwf } {fNam strpn {pop} if findfont fNam nwf} ifelse fNam findfont dup /fnt X chkPaintType {/tpamt 0 def} if /newFontName fNam def fontStyle 8 and 0 ne {  fontStyle 16 and 0 ne  {   newFontName dup findfont exch   sss sts dup /newFontName X 0 stlf pop  }  {   newFontName dup findfont exch   sos sts dup /newFontName X 1 stlf pop  }  ifelse } {  fontStyle 1 and 0 ne  {   newFontName dup findfont exch   sbs sts dup /newFontName X 2 stlf pop  }  {   tpamt 0 ne   {    newFontName dup findfont exch    sts dup /newFontName X 3 stlf pop   }   if  }  ifelse } ifelse newFontName findfont dup IsInsideOnRight [3 1 roll 0 fontStyle 2 and 0 ne dup /usangl X {1 add} if] far 3 1 roll put} B/t0{g s1 w 1 index 0 ne{3 1 roll add exch}{3 -1 roll pop}ifelse z4 z7 0 eq or z5 and nochdev not and{z7 0 eq nochp not and {mtx currentmatrix nulldevice z np 0 0 m s1 T charpath{flattenpath}stopped{F} {pathbbox 4 copy 3 -1 roll ne 3 1 roll ne and{T}{p4 F}ifelse}ifelse}{F}ifelse {T}{z4{z0 z1 z2 z3 T}{F}ifelse}ifelse}{F}ifelse G{10 -4 roll 4 {5 -1 roll add 4 1 roll}repeat setcachedevice}{setcharwidth p4}ifelse}B/t1 {g np dup m o F charpath n G} B/newmm{ dup /FontType get 0 eq {  dup maxlength dict begin  cf currentdict end dup /FDepVector  2 copy get  [exch 6 index exch 6 index exch {newmm 3 1 roll} forall p2]  put  dup } {  18 dict begin  /FontMatrix[1 0 0 1 0 0]def  /FontType 3 def  /Encoding 1 index dup  /Encoding known {/Encoding get}{pop xpv} ifelse def  /FontBBox [0 0 1 1] def  /df 1 index def  /FontName 3 index def  /df1 0 def  1 index 0 ge  {   /StyleCode 2 index def   /TrapWidth tpamt def  }  if  df/FontMatrix get  6a copy mark  df/FontBBox get aload pop counttomark 4 eq  {   5 -1 roll pop   4 index dtransform   /z3 X   /z2 X   3 -1 roll dtransform   /z1 X   /z0 X   T  }  {   cleartomark pop F  }  ifelse  /z4 X  1 index 0 ge  {   df/FontType get 3 ne  }  {F}  ifelse  /z5 X  df /PaintType 2 copy known  {get 0 eq {0}{1} ifelse}  {p2 1}  ifelse  dup /z7 X  0 ne  {  /df1/q  6 dict begin  /FontMatrix[1 0 0 1 0 0]def  /FontType 3 def  /Encoding 3 index dup  /Encoding known {/Encoding get}{pop xpv} ifelse def  /FontBBox[0 0 1 1]def  /BuildChar  {   pop begin xpwd begin   df setfont   0 0   d0 dup 0 t0   s1 0 0 smc   d0 0 smc d0 dup   smc 0 d0 m M   end end  } def  currentdict end definefont def  }  if  /BuildChar  {   4 setmiterlimit   exch begin xpwd begin   dup s1 0 3 -1 roll put   pop F bcar StyleCode 2 mul z7   add get exec {end end} if   end end  } def  currentdict end } ifelse 3 index exch definefont exch pop} B/getcurrentcolor{ llge2 {  currentcolorspace dup 0 get dup  /Separation eq exch /DeviceN eq or  {   dup 2 get   dup /DeviceCMYK eq dup 3 -1 roll /DeviceRGB eq or   {    exch 3 get mark currentcolor    counttomark 2 add -1 roll exec    counttomark 2 add -2 roll pop    g {setcmykcolor}{setrgbcolor} ifelse ldex G   }   {p2 ldex}   ifelse  }  {pop ldex}  ifelse } {ldex} ifelse} B/c{ /currentrgbcolor getcurrentcolor dup 4 1 roll eq 3 1 roll eq and {bkc 0 get 0 eq {1 /currentgray getcurrentcolor sub H}{gtc} ifelse} {1 H} ifelse} B/CreateStyle{ xpwd begin df setfont s1 d1 3 -1 roll t1 end} B/SetCharCache{ {  d1 neg dup d1 dup 5 -1 roll t0 } {  g s1 w G 3 1 roll add exch setcharwidth } ifelse} B/bcar[ {  df setfont /d0 .05 def TrapWidth .24 add psx div .012 2 copy lt{exch}if pop/d1 X  d0 F SetCharCache  s1 g d0 .01 add d0 vtd not {neg} if t 0 0 m M g 0 CreateStyle G G  g c 0 0 m s1 M G 0 CreateStyle } {  df setfont 1 psx div dup /d0 X 2 div dup /d3 X .05 add /d2 X g s1 w G 1 index 0 ne{exch d2 add exch}if setcharwidth s1 g d2 .01 add d2 vtd not{neg}if t 0 0 smc G  g df1 setfont 0 0 smc G c d3 dup m M } {  df setfont TrapWidth .24 add psx div .012  2 copy lt {exch} if pop /d1 X  0 F SetCharCache g F stovp c s1 0 0 m M G  0 CreateStyle } {  df setfont 1 psx div /d0 X g s1 w G 1 index 0 ne{exch d0 add exch}if setcharwidth  g df1 setfont s1 0 0 smc G c d0 2 div dup m M } {  df setfont /d0 .03 def TrapWidth dup 0 lt {neg psx div 0 2 copy lt{exch}if pop neg}  {psx div 0 2 copy lt {exch} if pop}  ifelse  .03 add /d1 X  d0 d1 0 ge SetCharCache  s1 d0 2 div dup m M d1 0 ne  {   d1 0 lt {/d1 d1 neg def gtc} if   d0 2 div CreateStyle  }  if } {  df setfont /d0 .03 def 0 0 d0 dup dup t0  s1 0 0 smc d0 0 smc d0 dup smc 0 d0 m M } {  df setfont  TrapWidth dup 0 lt {neg} if psx div 0 2 copy lt {exch} if pop /d1 X  TrapWidth 0 lt  {g s1 w G setcharwidth s1 0 0 m M gtc 0 CreateStyle}  {d1 neg dup d1 dup 0 t0 s1 dup d1 0 t1 0 0 m M}  ifelse } {df setfont g s1 w G setcharwidth s1 0 0 m M}] def/AddCMap{ currentsystemparams dup /PrinterName known {  /PrinterName get (Jaws) eq  {   /CMapStr X   str cvs length dup   str exch (-) putinterval   1 add dup str exch CMapStr putinterval   CMapStr length add str 0 3 -1 roll getinterval cvn  }  {pop}  ifelse } {p2} ifelse} B/shgr{ chc 0 get 1 eq {  100 45  {   dup mul exch   dup mul add 1 exch   sub  } setscreen  .8 } {  1 } ifelse H}def/setchc{chc exch 0 exch put}B/chkch{currentfont dup/Encoding 2 copy known{get 2 index 0 get get dup/.notdef ne {exch/CharStrings 2 copy known{get exch known not}{p3 T}ifelse} {p2 T}ifelse}{p3 T}ifelse}B/xpsh{ M}B/xpash{ N}B/xpwsh{ Y}B/xpawsh{ Q}B/FindEncoding{ currentfont /Encoding get dup length exch 0 exch {3 index eq {exit} if 1 add} forall dup 3 1 roll le {pop 0} if exch pop}B/HasZeroWidth{ FindEncoding ( ) dup 0 4 -1 roll put stringwidth pop 0 eq}B/WidthOfZero{ /zero FindEncoding ( ) dup 0 4 -1 roll put stringwidth pop}B/SlugStringWidth{ dup stringwidth 3 -1 roll /space HasZeroWidth {  /space FindEncoding 0 2 index {2 index eq {1 add} if} forall  3 1 roll pop pop WidthOfZero mul 3 -1 roll add exch } {pop} ifelse}B/SlugShow{ /space HasZeroWidth {  /space FindEncoding ( ) dup 0 4 -1 roll put  {search {xpsh WidthOfZero 0 rm}{xpsh exit} ifelse}  loop } {xpsh} ifelse}B/xpfshstr{ 1 index 6 1 roll np 3 1 roll 2 copy m 3 -1 roll dup SlugStringWidth pop 3 index add 3 index 3 index 6 sub 3 -1 roll 4 index 2 add np dup 3 index sub 2 div dup 3 1 roll 2 div add 3 1 roll dup 4 1 roll 9 index not {pop 1} if add 5 2 roll dup 3 1 roll sub 3 1 roll 9 index not {pop 1} if sub 4 2 roll 9 -2 roll p2 dup 9 1 roll g [ [currentcolor] {1 exch sub} forall ] aload pop xpsc F rc V G 3 1 roll m SlugShow} B/xpfsh{ g T T 5 2 roll xpfshstr G p2} B/localizecolorname{ 0 currentpagedevice /SeparationColorNames get {  2 index eq  {LocalizedColorNames exch get exch exit}  if  1 add } forall pop} B/xpfshsep {g T T 5 2 roll xpfshstr p4 G} B/d{ dup w pop 3 -1 roll exch sub 3 -1 roll div 0 32 3 -1 roll 0 5 -1 roll Q}B/D{ dup w pop 3 -1 roll exch sub 3 -1 roll div 0 3 -1 roll xpash}B/ssh{g vtd{neg}if rm shgr dup xpsh G xpsh}B/std{5 copy g dup vtd{neg}if rm shgr d pop G d}B/mc{0 3 1 roll transform neg exch pop}B/sgt{2 copy known{get T}{p2 F}ifelse}B/kif{currentfont dup/FontMatrix get exch/FontInfo sgt{T}{currentfont/df sgt  {dup/FontInfo sgt{3 1 roll/FontMatrix get mtx concatmatrix exch T}{p3 F}  ifelse}{p2 F}ifelse}ifelse{3 -1 roll sgt{exch T}{pop F}ifelse}{F}ifelse}Buserdict /TextClipping false put/Underline{ g /useCurrentFont X {  90 rotate  1 -1 S } if /faceAndLineCap X /thickness X /smallCapVar X thickness 0 lt {  useCurrentFont  {   /UnderlinePosition kif   {    mc    neg ulpmax 0 ne    {     dup     thickness div abs     ulpmax gt     {      pop T     }     {      F     } ifelse    }    {     F    } ifelse   }   {    T   } ifelse  }  {   T  } ifelse  {   thickness -10 div  } if  faceAndLineCap 1 and  0 ne  {   smallCapVar div  } if  useCurrentFont  {   /UnderlineThickness kif   {    mc    ultmax 0 ne    {     dup     thickness div abs ultmax gt     {      pop T     }     {      F     } ifelse    }    {     F    } ifelse   }   {    T   } ifelse  }  {   T  } ifelse  {   thickness -15 div  } if  faceAndLineCap 1 and  0 ne  {   smallCapVar div  } if } {  thickness } ifelse abs useCurrentFont {  currentfont /TrapWidth sgt } {  F } ifelse not {  0 } if dup dup 2 div dup dup 0 lt {  pop 0 } if /actualTrapWidth X neg 5 -1 roll rm 3 -1 roll add dup 0 lt {  pop 0 } if o add dup 0 lt {  pop 0 } if currentpoint np m faceAndLineCap 16 and 0 ne {  g  faceAndLineCap 8 and 0 eq  {   shgr  } if  currentlinewidth 2 div dup rm  dup 0 TextClipping {StoreUL}{rl n} ifelse  G } if faceAndLineCap 8 and 0 ne dup {  g  gtc  1 index 0  rl n  G } if {  actualTrapWidth sub actualTrapWidth 2 div  0 rm  currentlinewidth actualTrapWidth sub  o  currentpoint  np currentlinewidth  2 div sub m  dup 0 rl  0 currentlinewidth  faceAndLineCap 512 and 0 eq {rl}{rm} ifelse  neg 0 rl  faceAndLineCap 256 and 0 eq {0 currentlinewidth neg rl} if  xpys actualTrapWidth add o 2 a } {0 TextClipping {StoreUL}{rl} ifelse} ifelse TextClipping not {n} if G} B/strik{ g [] 0 p o np m rl n G} B/rv{ /@2 X /@3 X /@4 X /@5 X /@6 X /@7 X cps np @6 @7 @3 90 @2 sub @2 arcn @4 @7 @3 180 @2 sub 90 @2 add arcn @4 @5 @3 270 @2 sub 180 @2 add arcn @6 @5 @3 360 @2 sub 270 @2 add arcn cp mif} B/rs{ /@2 X /@4 X /@5 X /@6 X /@7 X cps np @6 @2 add @7 m @4 @2 sub @7 l @4 @7 @2 add l @4 @5 @2 sub l @4 @2 sub @5 l @6 @2 add @5 l @6 @5 @2 sub l @6 @7 @2 add l cp mif} B/dop{dup 6 le{vrb exch get exec}{pop}ifelse}B/vrb[{fp{fg 0 get 0 ne{g n G} {g 1 o pnsh pnsv S n G}ifelse}if np}bind /eofill load dup/newpath load 1 index dup{u np}bind]def/fp{pnsh 0 ne pnsv 0 ne and}B/pen{pnm mul/pnsh X pnm mul/pnsv X pnsh o}B/lin{fg 0 get 0 ne{l currentpoint 0 dop m} {currentpoint/@3 X/@4 X g np/@1 X/@2 X fp{@4 @2 lt{@3 @1 ge{@4 @3 m @2 @1 l pnsh 0 rl 0 pnsv rl @4 pnsh add @3 pnsv add l pnsh neg 0 rl} {@4 @3 m pnsh 0 rl @2 pnsh add @1 l 0 pnsv rl pnsh neg 0 rl @4 @3 pnsv add l}ifelse}{@3 @1 gt {@2 @1 m pnsh 0 rl @4 pnsh add @3 l 0 pnsv rl pnsh neg 0 rl @2 @1 pnsv add l}{@4 @3 m pnsh 0 rl 0 pnsv rl @2 pnsh add @1 pnsv add l pnsh neg 0 rl 0 pnsv neg rl}ifelse}ifelse cp v}if @2 @1 G m}ifelse}B/rc{dup/@flag X{/@t X g}if cps dup{5 1}{7 3}ifelse roll np 4 copy 4 2 roll exch m 6 -1 roll l l l cp @flag{@t dop G}if mif}B/cmnrr{cps np @4 @6 add 2 div @7 m @4 @7 @4 @5 @2 arcto p4 @4 @5 @6 @5 @2 arcto p4 @6 @5 @6 @7 @2 arcto p4 @6 @7 @4 @7 @2 arcto p4 cp mif}B/rr{/@1 X 2 div/@2 X pop/@4 X/@5 X/@6 X/@7 X @7 @5 eq @6 @4 eq or @2 pnsh 2 div le or @2 pnsv 2 div le or {@7 @6 @5 @4 @1 T rc}{@4 @6 sub abs 2 div dup @2 lt{/@2 X}{pop}ifelse @5 @7 sub abs 2 div dup @2 lt{/@2 X}{pop}ifelse @1 0 eq{@2 pnsh 2 div 2 copy gt{sub/@2 X}{p2}ifelse}if g cmnrr @1 dop G}ifelse}B/rr1{/@2 X/@4 X/@5 X/@6 X/@7 X cmnrr}B/qa{3 -1 roll add exch 3 -1 roll add exch}B/qm{3 -1 roll 1 index mul 3 1 roll mul}B/qs{3 -1 roll sub exch 3 -1 roll sub exch}B/qp{6 copy 12 -2 roll p2}B/qn{6a exch get mul}B/qx{6a astore pop qA 0 qn qB 2 qn add   qA 1 qn qB 3 qn add qB 2 qn qA 4 qn add   qB 3 qn qA 5 qn add qC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}B/bp{currentpoint np 2 copy m}B/qi{{4 copy 2 copy 10 2 roll qa .5 qm np m}{2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}B/qc{qp qx O}B/qq{{qc 6 -2 roll qx O}{4 copy qs qa qx O}ifelse}B/ep{dup 0 eq{{m}{lin}{}{}pathforall pop}{dop}ifelse G cps np mif}B/ef{ff{g V G}if}B/ec{1 and 0 ne{0 dop}if G currentpoint np m}B/eu{currentpoint fp{0 ep}{G np}ifelse m}B/pt{currentpoint np m}B/barc{/@flag X/@1 X/@3 X/@4 X @flag{/@2 X}if/@5 X /@6 X/@7 X/@8 X @flag{g}if cps mtx currentmatrix @5 @7 add 2 div @6 @8 add 2 div t np 0 0 m @5 @7 sub @6 @8 sub S @1{np}if 0 0 .5 @4 @3 arc @4 @3 sub abs 360 ge{cp}if z mif @flag{@2 dop G}if}B/ar{3 1 roll 2 index 0 eq T barc}B/ov{0 360 T 4 -1 roll barc}B/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}B/tp{2a astore pop}B/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy t 2a aload pop exch dup 0 eq {pop}{1 eq{-1 1}{1 -1}ifelse S}ifelse rotate neg exch neg exch t m}B/te{mx2 z}B/px{tp tt}B/dh{fg 0 1 put array astore dup{1 xpxs div mul exch}forall astore exch pop exch pop exch p}B/rh{fg 0 0 put ih aload pop p}B/sd{a50 0 3 -1 roll getinterval astore exch p}B/lw{div/pnm X pnsv pnsh pen}B/gr{64 div H}B/sg{rstrscr gr}B/TilePattern{ /PatternValue X /BackColor X /ForeColor X /ColorSpace X (<<) cvx exec  /PatternType 1  /PaintType 1  /TilingType 1  /BBox [0 0 8 8]  /XStep 8  /YStep 8  ColorSpace /DeviceGray eq  {   /PatternString 64 string def   /DecodeArray [0 1] def   /PatStep 1 def  }  {   ColorSpace /DeviceCMYK eq   {    /PatternString 256 string def    /DecodeArray [0 1 0 1 0 1 0 1] def    /PatStep 4 def   }   {    /PatternString 192 string def    /DecodeArray [0 1 0 1 0 1] def    /PatStep 3 def   } ifelse  } ifelse  /PaintProc  {   begin   ColorSpace setcolorspace   8 8 scale   (<<) cvx exec    /ImageType 1    /Width 8    /Height 8    /BitsPerComponent 8    /Decode DecodeArray    /ImageMatrix [8 0 0 -8 0 8]    /DataSource    {     0     PatternValue     {      8      {       dup 1 and 1 eq {BackColor}{ForeColor} ifelse       PatternString 3 index 3 -1 roll       ColorSpace /DeviceGray eq       {put}{putinterval} ifelse       exch PatStep add exch       -1 bitshift      } repeat pop     } forall pop     PatternString    }   (>>) cvx exec   image   end  } bind (>>) cvx exec matrix makepattern} B/pat{savscr sa8 copy pop patfr 0 [{1 add 4 mul cvi}aload pop sa8 {exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}aload pop]cvx setscreen gr}def/cpat{savscr 7 -1 roll sa8 copy pop patfr 0 [{1 add 4 mul cvi}aload pop sa8 {exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}aload pop]cvx 8 -1 roll sb8 copy pop patfr 0 [{1 add 4 mul cvi}aload pop sb8 {exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}aload pop]cvx 9 -1 roll sc8 copy pop patfr 0 [{1 add 4 mul cvi}aload pop sc8 {exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}aload pop]cvx 10 -1 roll sd8 copy pop patfr 0 [{1 add 4 mul cvi}aload pop sd8 {exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}aload pop]cvx setcolorscreen setcmykcolor}def/savscr{ns not{/ns T def cmykprsnt {currentcolorscreen currentcolortransfer count 16 roll} {currentscreen ctf count 4 roll}ifelse st0}if}def/rstrscr{ns{cmykprsnt{count -16 roll systemdict/setcolortransfer known {cstf}{stf p3}ifelse setcolorscreen} {count -4 roll stf setscreen}ifelse/ns F def}if}def/setclp{np 0 0 m ct1 99 get 0 ne{ct1 0 ct1 99 get getinterval cvx exec}if ctp cps np mif}B/spcldr{dup doss ss and{sym fmtx makefont/xpfs X 0 0 3 -1 roll{s1 0 3 -1 roll put s1 chkch{g xpfs setfont w G} {w}ifelse 3 -1 roll add 3 1 roll add exch}forall} {w}ifelse pop 3 -1 roll exch sub 3 -1 roll /numz 5 -1 roll def numz 10 mul add div numz 0 eq {0 0}{dup 10 mul 0}ifelse 32 4 -1 roll 0 6 -1 roll doss ss and{xpash p3}{Q}ifelse}B/VarGWidthShow{ 0 1 2 index length 1 sub {  2 copy 1 getinterval g M G  2 index 1 index get 4 index 3 -1 roll get rm } for pop pop pop}B/VarGWidthShadowShow{ g dup vtd {neg} if rm shgr 3 copy VarGWidthShow G VarGWidthShow}B/XPxyshow{ {xyshow} stopped {pop show} if} B/Shadowxyshow{ g vtd {neg} if rm shgr 2 copy XPxyshow G XPxyshow} B/EndTextBox {} defuserdict/ULarrays 200 array putuserdict/ULcount 0 put/StoreUL{ userdict begin currentpoint currentlinewidth 2 div sub currentlinewidth matrix currentmatrix 6 array astore ULarrays ULcount 3 -1 roll put /ULcount ULcount 1 add def end} def/ProcessUL{ userdict begin 0 1 ULcount 1 sub {  ULarrays exch get  matrix currentmatrix exch  aload pop setmatrix  3 dict begin  /ulwid exch def  moveto  /h exch dup 0 eq {pop ulwid} if def  /w exch dup 0 eq {pop ulwid} if def  xpReversePath  {   w 0 rlineto   0 h rlineto   w neg 0 rlineto  }  {  0 h rlineto  w 0 rlineto  0 h neg rlineto  }  ifelse  closepath  end setmatrix } for /ULcount 0 def end} def/DPDict(<<) cvx exec /m {100 div exch 100 div exch moveto} /l {100 div exch 100 div exch lineto} /c {6 {100 div 6 1 roll} repeat curveto} /C /closepath load(>>) cvx exec def/DistillPath{ gsave  newpath -10000 dup translate 0 0 moveto  currentfont 100 scalefont setfont  true charpath [{/m}{/l}{/c}{/C} pathforall] grestore currentpoint 2 copy translate 3 -1 roll DPDict begin  {dup type /nametype eq {load exec} if} forall end neg exch neg exch translate} B/s100 100 string def/IsDistiller{ product dup (Jaws PDF Creator) eq exch (Distiller) eq or} def/IsBoldStyle{ currentfont /StyleCode known {  currentfont /FontName get s100 cvs  dup length 4 gt  {dup 0 get 124 eq exch 3 get 66 eq and}  {pop false}  ifelse } {false} ifelse} def/BeginTextClip{ gsave /XPxyshow where {  dup dup /XPxyshow get /oldXPxyshow exch put  /XPxyshow  {   /_bi currentfont /FontType get 0 eq   {    2 {2 index length} repeat eq {2}{1} ifelse   }   {1}   ifelse   def   0 _bi 3 index length 1 sub dup /_zi exch def   {    dup 3 index exch _bi getinterval    currentpoint 3 -1 roll    IsDistiller    {DistillPath}    {     IsBoldStyle     {dup currentpoint 3 -1 roll false charpath moveto false}     {true}     ifelse     charpath    }    ifelse    2 index _zi eq    {pop pop pop}    {     moveto 2 _bi div mul cvi 1 index exch 2 getinterval aload pop     rmoveto    }    ifelse   }   for   pop pop  } bind  put } {XPxyshow_Not_Found} ifelse /M where {  dup dup /M get /oldM exch put  /M  {   IsDistiller   {DistillPath}   {    IsBoldStyle    {dup currentpoint 3 -1 roll false charpath moveto false}    {true}    ifelse    charpath   }   ifelse  } bind put } {M_Not_Found} ifelse /Shadowxyshow where {  dup dup /Shadowxyshow get /oldShadowxyshow exch put  /Shadowxyshow {rmoveto XPxyshow} bind put } {Shadowxyshow_Not_Found} ifelse /ssh where {  dup dup /ssh get /oldssh exch put  /ssh {rmoveto /M load exec} bind put } {ssh_Not_Found} ifelse /strik where {  dup dup /strik get /oldstrik exch put  /strik  {   dup 6 1 roll 2 div   xpReversePath {sub}{add} ifelse   m 2 copy neg exch neg exch 5 2 roll rl   0 exch xpReversePath not {neg} if rl rl cp  } bind put } {strik_Not_Found} ifelse userdict /TextClipping true put /EndTextBox where {  dup dup /EndTextBox get /oldEndTextBox exch put  /EndTextBox {ProcessUL clip currentpoint newpath moveto} bind put } {EndTextBox_Not_Found} ifelse} B/EndTextClip{ /XPxyshow where {dup /oldXPxyshow get /XPxyshow exch put} {XPxyshow_Not_Found} ifelse /M where {dup /oldM get /M exch put} {M_Not_Found} ifelse /Shadowxyshow where {dup /oldShadowxyshow get /Shadowxyshow exch put} {Shadowxyshow_Not_Found} ifelse /ssh where {dup /oldssh get /ssh exch put} {ssh_Not_Found} ifelse /strik where {dup /oldstrik get /strik exch put} {strik_Not_Found} ifelse userdict /TextClipping false put /EndTextBox where {dup /oldEndTextBox get /EndTextBox exch put} {EndTextBox_Not_Found} ifelse currentoverprint grestore stovp} B/calcbnd{72 72 mtx defaultmatrix dtransform abs exch abs 2 copy lt{exch}if /devpxwd 72 3 -1 roll div def/languagelevel where{pop languagelevel} {1}ifelse 2 ge{pop 256}{/currentcolorscreen where {pop currentcolorscreen p2 3{3 index 2 copy lt{exch}if 5 1 roll p4}repeat} {currentscreen p2}ifelse div dup mul round cvi 15 add 16 idiv dup 1 lt{pop 1}if 16 mul dup 256 gt{pop 256}if}ifelse minblnd 2 copy lt{exch}if pop/maxblnd X}B/getgray{ {currentcolorspace} stopped {currentgray} {  0 get /Separation eq {1 currentcolor sub}{currentgray} ifelse } ifelse} B/LABColorSpace[ /CIEBasedABC (<<) cvx exec  /RangeABC [0 1 0 1 0 1]  /DecodeABC  [   {100 mul 16 add 116 div} bind   {255 mul 128 sub 500 div} bind   {255 mul 128 sub 200 div} bind  ]  /MatrixABC  [   1 1 1   1 0 0   0 0 -1  ]  /RangeLMN [-.1181 1.254 .1379 1 -0.4971 1.64]  /DecodeLMN  [   {    dup 6 29 div ge    {dup dup mul mul}    {4 29 div sub 108 841 div mul}    ifelse    0.9642 mul   } bind   {    dup 6 29 div ge    {dup dup mul mul}    {4 29 div sub 108 841 div mul}    ifelse   } bind   {    dup 6 29 div ge    {dup dup mul mul}    {4 29 div sub 108 841 div mul}    ifelse    0.8249 mul   } bind  ]  /WhitePoint [0.9642 1.0000 0.8249] (>>) cvx exec] def/setlabcolor{ LABColorSpace setcolorspace setcolor} B/setsepval{ dup -1 eq {pop aload pop setcmykcolor}{setcustomcolor} ifelse getgray} B/setsepvalrgb{ dup -1 eq {pop aload pop setrgbcolor}{setcustomcolorrgb} ifelse getgray} B/setcompval{ dup -1 eq {pop aload pop} {exch aload p2 4 {4 index mul 4 1 roll} repeat 5 -1 roll pop} ifelse} B/setcompvalrgb{ dup -1 eq {pop aload pop} {  exch aload p2  3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat  4 -1 roll pop } ifelse} B/blnd{/maxblnd where{pop}{calcbnd}ifelse dup/blmode X 2 eq {/k1 X/y1 X/m1 X/c1 X/k0 X/y0 X/m0 X/c0 X}{/k1 X/k0 X}ifelse k1 k0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs c1 c0 sub abs 2 copy lt {exch c1 c0/@1 X/@2 X}if pop m1 m0 sub abs 2 copy lt {exch m1 m0/@1 X/@2 X}if pop y1 y0 sub abs lt{y1 y0/@1 X/@2 X}if}if @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if sub maxblnd mul round cvi dup dup/blstp X 0 eq{pop 1}if /blw 256 blstp 1 add div def/kstp k1 k0 sub 2 index div def blmode 2 eq{/cstp c1 c0 sub 2 index div def/mstp m1 m0 sub 2 index div def /ystp y1 y0 sub 2 index div def}if pop g np[]0 p 0 a blw dup dup devpxwd dup add add o 2 div blstp 1 add blmode 2 eq{{c0 m0 y0 k0 setcmykcolor dup 0 m 0 256 rl n 1 index add /c0 c0 cstp add def/m0 m0 mstp add def/y0 y0 ystp add def/k0 k0 kstp add def}repeat} {{k0 blmode 0 eq{H}{sepgr}ifelse dup 0 m 0 256 rl n 1 index add/k0 k0 kstp add def}repeat }ifelse p2 G}B/blndrgb{/maxblnd where{pop}{calcbnd}ifelse dup/blmode X 2 eq {/b1 X/g1 X/r1 X/b0 X/g0 X/r0 X}{/b1 X/b0 X}ifelse b1 b0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs r1 r0 sub abs 2 copy lt {exch r1 r0/@1 X/@2 X}if pop g1 g0 sub abs lt {g1 g0/@1 X/@2 X}if}if @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if sub maxblnd mul round cvi dup dup/blstp X 0 eq{pop 1}if /blw 256 blstp 1 add div def/bstp b1 b0 sub 2 index div def blmode 2 eq{/rstp r1 r0 sub 2 index div def/gstp g1 g0 sub 2 index div def}if pop g np[]0 p 0 a blw dup dup devpxwd dup add add o 2 div blstp 1 add blmode 2 eq{{r0 g0 b0 setrgbcolor dup 0 m 0 256 rl n 1 index add /r0 r0 rstp add def/g0 g0 gstp add def/b0 b0 bstp add def}repeat} {{b0 blmode 0 eq{H}{sepgr}ifelse dup 0 m 0 256 rl n 1 index add/b0 b0 bstp add def}repeat }ifelse p2 G}B/blndlab{/maxblnd where{pop}{calcbnd}ifelse dup/blmode X 2 eq {/b1 X/a1 X/l1 X/b0 X/a0 X/l0 X}{/b1 X/b0 X}ifelse b1 b0/@1 X/@2 X blmode 2 eq{@2 @1 sub abs l1 l0 sub abs 2 copy lt {exch l1 l0/@1 X/@2 X}if pop a1 a0 sub abs lt {a1 a0/@1 X/@2 X}if}if @1 @2 blmode 2 eq{1 exch sub exch 1 exch sub}if 2 copy lt{exch}if sub maxblnd mul round cvi dup dup/blstp X 0 eq{pop 1}if /blw 256 blstp 1 add div def/bstp b1 b0 sub 2 index div def blmode 2 eq{/lstp l1 l0 sub 2 index div def/astp a1 a0 sub 2 index div def}if pop g np[]0 p 0 a blw dup dup devpxwd dup add add o 2 div blstp 1 add blmode 2 eq{{l0 a0 b0 setlabcolor dup 0 m 0 256 rl n 1 index add /l0 l0 lstp add def/a0 a0 astp add def/b0 b0 bstp add def}repeat} {{b0 blmode 0 eq{H}{sepgr}ifelse dup 0 m 0 256 rl n 1 index add/b0 b0 bstp add def}repeat }ifelse p2 G}B/dograyblnd{ dup -2 eq {  doregblnd  {exch dup length 1 sub get 1 exch sub exch T F}  {   pop dup length 6 eq   {dup 0 5 getinterval exch 5 get}{0 4 getinterval -1}   ifelse   T  }  ifelse } {T} ifelse {dup -1 eq {F}{1 index dogray} ifelse} if} B/custblnd{ dograyblnd 5 -2 roll dograyblnd 4 -1 roll or {  dup -2 eq {pop}{setsepval} ifelse 3 1 roll  dup -2 eq {pop}{setsepval} ifelse 1 blnd } {setcompval 6 -2 roll setcompval 2 blnd} ifelse} B/dograyblndrgb{ dup -2 eq {  pop dup length 5 eq  {dup 0 4 getinterval exch 4 get}{0 3 getinterval -1}  ifelse } if} B/custblndrgb{ dograyblndrgb 4 2 roll dograyblndrgb setcompvalrgb 5 -2 roll setcompvalrgb 2 blndrgb} B/cctp{ cvlit /f2 X cvlit /f1 X /f12 f1 length f2 length add array def f12 0 f1 putinterval f12 f1 length f2 putinterval f12 cvx} B/st0 {/CT load stf} B/st1 {/CT load cctp stf} B/stcp {ctf cctp stf} B/upl{ dup length exch 0 0 {  3 copy exch pop get dup 64 lt  {32 sub 4 copy exch pop put pop 1}  {   63 sub exch 1 add exch 4 copy 3 -1 roll pop getinterval   5 copy 3 1 roll pop pop putinterval pop  }  ifelse  dup 4 -1 roll add 3 1 roll add dup 4 index ge {exit} if } loop 4 -1 roll pop pop 0 exch getinterval} B/bmp{ save 16 1 roll {0 H} if /@1 X 4 index div add 3 1 roll 5 index div add t div 3 1 roll div S @1 1 and 1 eq @1 2 and 2 eq {  g dup {0}{1} ifelse H .5 .5 idtransform abs exch abs 2 copy  neg 1 add exch neg 1 add exch F rc V G } if {currentgray 1 exch sub H} if exch bmpclr {  string /S0 X pop /sf findfont setfont  exch 1 exch div 1 index 1 exch div  S 0 1 3 -1 roll 1 sub  {   {    currentfile S0 readline pop currentfile str readline pop    cvi dup abs 1 sub 3 index m exch M 0 lt {exit} if   }   loop   pop  }  for } {3 index 0 0 5 index 0 0 mtx astore exch 1 rdstr imagemask} ifelse restore} B/bmpclr {} defpkng{savepacking setpacking}ifend%%EndProcSet%%BeginProcSet: QuarkXPress_EPS_Separation 3.3 1 0userdict /epsdict 187 dict dup begin put/T true def/F false def/CT 0 def/colorKnkOut T def/epsOvpK F def/K2 F def/op F def/sepf F def/h 0 def/i 0 def/j 0 def/k 0 def/s 0 def/I 0 def/J 0 def/f1 0 def/f2 0 def/f12 0 def/g0 0 def/g1 0 def/g2 0 def/g3 0 def/cc 0 def/qxpcid -1 def/ccls 0 def/ccn 0 def/ccs [/DeviceGray] def/ccpl 0 def/inksArray 0 def/currHexPlate 0 def/hexPlate 0 def/isHexSep F def/currentProcessPlateIndex 0 def/currentProcessPlateColor 0 def/processInksArray [(Cyan)(Magenta)(Yellow)(Black)] def/stackCount 0 def/stackArray 0 def/fctr 0 def/ccomps 0 def/additive F def/x matrix def/A 192 array def/setpacking where dup {exch pop currentpacking exch true setpacking} if/B {bind def} bind def/X {exch def} B/p2 {pop pop} B/p3 {pop pop pop} B/p4 {pop pop pop pop} B/xpdctsop [currentdict/begin load] cvx B/e /end load def/E {load e exec xpdctsop} B/E0 {load e exec} B/stf systemdict /settransfer get def/ctf systemdict /currenttransfer get def/TintTransformToCMYK 0 def/maskWidth 0 def/dataWidth 0 def/cctp{ cvlit /f2 X cvlit /f1 X /f12 f1 length f2 length add array def f12 0 f1 putinterval f12 f1 length f2 putinterval f12 cvx} B/st1 {/CT load cctp stf} B/stcp {ctf cctp stf} B/setoverprint {xpdctsop /op X e} B/currentoverprint {xpdctsop op e} B/P{ op not colorKnkOut and currentcolorspace type IsArrayType dup {currentcolorspace 0 get /Pattern ne {pop F} if} if {BlendOnPlate}{currentgray 1 ne} ifelse or K2 or} B/setcolortransfer {xpdctsop 4 1 roll p3 /stf E0} B/setcolorscreen {xpdctsop 12 3 roll p3 p3 p3 /setscreen E0} B/setseparationgray /setgray load def/setlvl {1 exch sub setseparationgray} B/setcmykcolor{ xpdctsop /colorKnkOut epsOvpK {1 index 1 ne}{T} ifelse def p4 1 setseparationgray e} B/setgray{ xpdctsop K2 {setseparationgray} {1 exch sub 0 0 0 4 -1 roll setcmykcolor} ifelse e} B/setrgbcolor{ 3 {1 exch sub 3 1 roll} repeat 3 copy 2 {2 copy gt {exch} if pop} repeat 4 1 roll 3 {3 index sub 3 1 roll} repeat 4 -1 roll setcmykcolor} B/setcmybcolor {setcmykcolor} B/findcmykcustomcolor {5 array astore readonly} B/xpsetcustomcolor{ xpdctsop exch dup 4 get /ccn X /sepf F def /colorKnkOut T def ccls {ccn eq {/sepf T def exit} if} forall sepf  {pop F ccpl {ccn eq {pop T exit} if} forall  {setlvl}{pop 0 setlvl}  ifelse } {aload p2 4 {4 index mul 4 1 roll} repeat setcmykcolor pop} ifelse e} B/setcustc{ xpdctsop/custprsnt T def /regsh -1 def /custsh X dup length custnamstr dup 79 3 index put 0 3 -1 roll getinterval copy custar astore custsh xpsetcustomcolor e} B/F0 /sethsbcolor load def/sethsbcolor {xpdctsop F0 currentrgbcolor setrgbcolor e} B/F1 /imagemask load def/imagemask{ xpdctsop P {/F1 E0}{gsave nulldevice/F1 E0 grestore} ifelse} B/separationimage /image load def/F2 /image load def/getStr{ currentdict 1 index known {  dup load dup length 3 index eq  {3 1 roll p2 F}  {pop T}  ifelse } {T} ifelse {exch string dup 3 1 roll def} if} B/GetInkNamesArray{ dup 1 get exch 0 get /Separation eq {[exch]} if} B/deviceNsnglpr{ ccs GetInkNamesArray dup /inksArray X length /nComps X /g0 load nComps 1024 mul /picstr getStr readstring pop dup dup length /dnstr getStr copy /compositeData X dup dup length nComps idiv 0 exch getinterval /s X s length /Str exch 4 mul string def /indx 0 def /found F def ccpl length 0 eq {  isHexSep  {   0 inksArray   {    0 1 3    {     dup 3 2 roll dup 3 -1 roll     [(Cyan)(Magenta)(Yellow)(Black)] exch get eq {exch exit} if     exch 1 add dup 4 ne {pop} if    }    for    4 1 roll pop 3 1 roll dup length 1 sub 3 index nComps 3 -1 roll    5 -1 roll dup 4 ne    {     4 1 roll     {1 index 2 1 roll 3 index exch get Str 3 -2 roll put 4 add}     for     pop /found T def    }    {pop pop pop pop}    ifelse    exch 1 add   }   forall   pop pop  }  {   inksArray   {    currentProcessPlateColor eq {/found T def exit} if    /indx indx 1 add def   }   forall  }  ifelse } {  inksArray  {   ccpl 0 get eq {/found T def exit} if   /indx indx 1 add def  }  forall } ifelse found {  isHexSep  {   Str CMYKToHex dup length 1 sub   0 currentProcessPlateIndex 6 4 -1 roll  }  {   0   1 index length 1 sub indx nComps 3 -1 roll  } ifelse  {2 index exch get s 2 index 3 -1 roll put 1 add}  for  pop } {  isHexSep {Str} if  s dup length 1 sub 0 1 3 -1 roll  {1 index exch 0 put}  for  pop } ifelse pop s compositeData convertToProcess} B/GetBaseColorSpace{ ccs dup 0 get /Indexed eq {1 get dup type IsArrayType not {[exch]} if} if} B/IsSpot{ {  dup (Cyan) eq {pop F exit} if  dup (Magenta) eq {pop F exit} if  dup (Yellow) eq {pop F exit} if  dup (Black) eq {pop F exit} if  pop T exit } loop} B/IsNotInInkArray{ dup (None) eq {pop F} {  T exch  ccls {   1 index eq {exch pop F exch exit} if  } forall  pop } ifelse} B/CreateSpotLUTs{ /i 0 def ccs 0 get /Indexed eq /isIndexedCSpace X GetBaseColorSpace GetInkNamesArray dup length dup /nComps X array /spotLUTs X {  dup IsSpot  {   IsNotInInkArray   {    [nComps {0} repeat]    dup i 1 put    [exch aload pop MakeCMYKFromAltColor]    currentProcessPlateIndex 0 ge    {currentProcessPlateIndex get}{3 get}    ifelse    dup 0 lt {pop 0}{dup 1 gt {pop 1} if} ifelse    256 string exch 0    0 1 255    {1 index 4 index 3 1 roll round cvi put 1 index add}    for    p2 spotLUTs i 3 -1 roll put   } if  }  {spotLUTs i null put pop}  ifelse  /i i 1 add def } forall} B/convertToProcess{ currentProcessPlateIndex 0 ge {  /i 0 def  GetBaseColorSpace GetInkNamesArray dup length /nComps X  {   dup IsSpot   {    IsNotInInkArray    {     spotLUTs i get 0     2 index length 1 sub i nComps 3 -1 roll     {      3 index exch get 2 index exch get      4 index 2 index 2 copy get      4 -1 roll isIndexedCSpace      {sub dup 0 lt {pop 0} if}      {add dup 255 gt {pop 255} if}      ifelse      put 1 add     }     for     p2    } if   }   {pop}   ifelse   /i i 1 add def  } forall } if pop} B/jimage{ gsave /ccomps  1 ccs 0 get dup /DeviceRGB eq  {p2 3}{/DeviceCMYK eq {pop 4} if}  ifelse def ccs 0 get dup /DeviceRGB eq exch /DeviceGray eq isHexSep not and or /additive X additive not {{1 exch sub} stcp} if /g0 X ccs 0 get dup /DeviceN eq exch /Separation eq or {CreateSpotLUTs /deviceNsnglpr load} {  /snglpr load 2 index 8 eq cc 1 eq cc 16 eq or 2 copy and /k X  cc 5 ge cc 7 le and cc 13 ge cc 15 le and cc 17 ge cc 18 le and  or or or and /h X  additive cc 1 eq cc 13 eq or K2 or not and  {   {pop 1} st1  } if } ifelse F2 grestore} B/extractlookup{ 3 index 1 add string 0 1 6 index {  dup 5 index mul 4 index add  3 index exch get 255 exch sub  2 index 3 1 roll put } for 4 1 roll p3} B/makelookup{ dup dup length string copy /compositeData X 2 index dup length exch 0 F 3 -1 roll {  ccpl dup length 0 eq  {   pop   [[5 (Cyan)][6 (Magenta)][7 (Yellow)][1 (Black)]]   dup length 0 1 3 -1 roll 1 sub   {    1 index exch get dup 0 get dup 1 eq exch cc eq or    {1 get [exch] exch pop exit} if    pop   }   for  }  if  {1 index eq {exch pop T exch exit} if}  forall  1 index {exch exit}{p2 1 add F} ifelse } forall {pop 3 -1 roll extractlookup} {p3 dup dup 1 add string 0 1 4 -1 roll {1 index exch 255 put} for} ifelse ccs dup 0 get /Indexed eq {  1 get dup type IsArrayType  {0 get /DeviceN eq}{pop F}  ifelse } {pop F} ifelse {CreateSpotLUTs compositeData convertToProcess} if} B/dograyimage{ makelookup 3 -1 roll pop gsave [/Indexed /DeviceGray 5 -2 roll] F15 /F2 E0 grestore} B/image{ llge2 not {/imagesave save def} if xpdctsop dup type /dicttype eq {  ImageOnPlate not op and {nulldevice} if  ccs dup 0 get dup dup dup dup dup  /DeviceCMYK eq exch /DeviceN eq or exch  /DeviceGray eq or exch /DeviceRGB eq or exch /Separation eq or  {   p2   dup /ImageType get 3 eq   {    ccs 0 get dup /DeviceCMYK ne exch /DeviceN ne and    {Unsupported_Color_Space} if    dup /InterleaveType get 2 ne {Unsupported_InterleaveType} if    dup /MaskDict get /Width get 8 div ceiling cvi /maskWidth X    dup /DataDict get dup dup dup /DataSource get /g0 X    /Width get /dataWidth X    /DataSource ccs 0 get /DeviceCMYK eq    {     /ccomps 4 def     /ReadCMYKMaskedImageData    }    {     /numImgComps GetNumCCSDNComponents def     /curClrDataIdx GetCurrentColorDataIndex def     /srcStr numImgComps dataWidth mul maskWidth add string def     /dstStr dataWidth maskWidth add string def     /ReadDNMaskedImageData    }    ifelse    load put    /Decode [1 0] put    gsave    [/DeviceGray] setcolorspace    F2    grestore   }   {    dup /Width get exch dup /Height get exch    dup /BitsPerComponent get exch    dup /ImageMatrix get exch    /DataSource get    jimage   }   ifelse   e  }  {   /Indexed eq   {    dup 1 get dup type IsArrayType    {     dup dup 0 get dup /DeviceN eq exch /Separation eq or     exch 2 get /DeviceCMYK eq and    }    {F}    ifelse    {     1 get dup type IsArrayType not     {1 array astore}     if     exch dup 2 get exch 3 get     dograyimage    }    {     /DeviceCMYK eq     {      [(Cyan)(Magenta)(Yellow)(Black)] exch dup 2 get exch 3 get      dograyimage     }     {pop}     ifelse    }    ifelse   }   {pop /F2 E0}   ifelse  }  ifelse } {  cc 1 eq K2 or  {/F2 E0}{gsave {pop 1} st1 /F2 E0 grestore}  ifelse } ifelse llge2 {1 vmreclaim}{imagesave restore} ifelse} B/customcolorimage{ xpdctsop dup 4 get /ccn X F /sepf X ccls {ccn eq {/sepf T def exit} if} forall sepf {  pop F ccpl {ccn eq {pop T exit} if} forall  {/F2 E0}{gsave {pop 1} st1 /F2 E0 grestore} ifelse } {  gsave currentProcessPlateIndex 0 ge  {   currentProcessPlateIndex get /fctr X   {1 fctr 1 4 -1 roll sub mul sub} stcp  }  {pop {pop 1} st1}  ifelse  /F2 E0 grestore } ifelse} B/rgbmultpr{ /g0 E /g1 E /g2 E dup 4 1 roll k {  0 exch  {   .11 mul 2 index 2 index get .59 mul add   3 index 2 index get .3 mul add round cvi   4 index 2 index 3 -1 roll put 1 add  }  forall  p3 } {p3} ifelse} B/cmymultpr{ [/g0 E /g1 E /g2 E /g3 E] currentProcessPlateIndex dup 0 lt {pop 3} if get} B/clears{ s dup length 1 sub 0 1 3 -1 roll {1 index exch 0 put} for pop} B/snglpr{ /g0 E dup type (filetype) eq dup /fileType X {  ccomps 1024 mul /picstr getStr readstring pop  isHexSep  {ccs 0 get /DeviceCMYK eq {CMYKToHex}{GrayToHex} ifelse}  if } if dup dup length isHexSep {6}{ccomps} ifelse idiv 0 exch getinterval /s X h {  ccomps 3 eq  {   k   {    0    1 index length 1 sub 0 3 3 -1 roll    {     2 index exch 3 getinterval {} forall     .11 mul exch .59 mul add exch .3 mul add round cvi     s 2 index 3 -1 roll put 1 add    }    for    pop   }   {clears}   ifelse  }  {   ccomps dup 4 eq exch 1 eq or   {    dup type IsArrayType ccomps 4 eq and    {     dup 0 get exec currentProcessPlateIndex 0 eq {/s X}{pop} ifelse     dup 1 get exec currentProcessPlateIndex 1 eq {/s X}{pop} ifelse     dup 2 get exec currentProcessPlateIndex 2 eq {/s X}{pop} ifelse     dup 3 get exec currentProcessPlateIndex 3 eq {/s X}{pop} ifelse    }    {     0     1 index length 1 sub currentProcessPlateIndex     isHexSep {6}{ccomps} ifelse     3 -1 roll     {2 index exch get s 2 index 3 -1 roll put 1 add}     for     pop    }    ifelse   }   {    cc 1 ne    {clears}    if   }   ifelse  }  ifelse } {  fileType  {clears}  if } ifelse pop s} B/ReadCMYKMaskedImageData{ /g0 E ccomps dataWidth mul maskWidth add /srcStr getStr readstring pop dataWidth maskWidth add /dstStr getStr currentProcessPlateIndex dup 0 lt exch 3 gt or {  dup length 1 sub 0 1 3 -1 roll  {1 index exch 0 put}  for  exch pop } {  maskWidth  2 index 0 2 index getinterval  2 index copy pop  dup currentProcessPlateIndex add  4 4 index length 1 sub  {   3 index exch get   2 index 2 index 3 -1 roll put   1 add  }  for  pop exch pop } ifelse} B/GetCurrentPlateName{ (<<) cvx exec   5 (Cyan)   6 (Magenta)   7 (Yellow)   1 (Black) (>>) cvx exec cc 2 copy known {get} {  ccpl 0 eq {No_Spot_Plate_Name} if  pop pop ccpl dup length 0 eq {pop 0}{0 get} ifelse } ifelse} def/GetCurrentColorDataIndex{ GetCurrentPlateName 0 true ccs 1 get {  3 index eq {pop false exit} if  exch 1 add exch } forall {pop -1} if exch pop} B/GetNumCCSDNComponents {ccs 1 get length} def/ReadDNMaskedImageData{ /g0 E srcStr readstring pop dstStr curClrDataIdx 0 ge {  maskWidth  2 index 0 2 index getinterval  2 index copy pop  dup curClrDataIdx add  numImgComps 4 index length 1 sub  {   3 index exch get   2 index 2 index 3 -1 roll put   1 add  }  for  pop exch pop } {  dup length 1 sub 0 1 3 -1 roll  {1 index exch 0 put}  for  exch pop } ifelse} B/colorimage{ llge2 {gsave}{/imagesave save def} ifelse xpdctsop dup /ccomps X 4 eq {{1 exch sub} stcp} if {  ccomps 3 eq  {/g2 X /g1 X /g0 X /rgbmultpr load}  {/g3 X /g2 X /g1 X /g0 X /cmymultpr load}  ifelse } {/g0 X /snglpr load} ifelse 2 index 8 eq cc 1 eq 2 copy and /k X cc 5 ge cc 7 le and or dup 3 1 roll and /h X ccomps 4 eq and {F2}{image} ifelse e llge2 {grestore 1 vmreclaim}{imagesave restore} ifelse} B/CMYKToHex{ dup dup length dup /StrHex exch 4 idiv 6 mul string def 0 3 -1 roll [exch {255 div} forall]  6 string 0 4 6 -1 roll 1 sub  {    2 index 1 index 4 getinterval    aload pop hcmulf    7 index 5 -1 0    {1 index exch 4 -1 roll 255 mul cvi put}    for    StrHex 6 -1 roll dup 6 add 7 1 roll 3 -1 roll putinterval pop   }  for  pop pop pop pop StrHex} B/GrayToHex{ dup dup length dup /StrHex exch 6 mul string def 0 3 -1 roll [exch {255 div 1 exch sub} forall] 6 string 0 1 6 -1 roll 1 sub {  2 index 1 index get  componentArray 3 get {1 index mul exch} forall pop  7 index 5 -1 0  {1 index exch 4 -1 roll 255 mul cvi put}  for  StrHex 6 -1 roll dup 6 add 7 1 roll 3 -1 roll putinterval pop } for pop pop pop pop StrHex} B/csStack 32 array def/csStackCount 0 def/csSave{ csStackCount dup csStack length ge {32 add array dup csStack exch copy pop /csStack X} {pop} ifelse csStack csStackCount ccs put /csStackCount csStackCount 1 add def} B/csRestore{ {  /csStackCount csStackCount 1 sub dup 0 lt {pop 0} if def  /ccs csStack csStackCount get def } {  /csStackCount 0 def  /ccs csStack 0 get def } ifelse} B/F3/fill load def/fill {xpdctsop P {/F3 E0}{newpath e} ifelse} B/F4/eofill load def/eofill {xpdctsop P {/F4 E0}{newpath e} ifelse} B/F5/stroke load def/stroke {xpdctsop P {/F5 E0}{newpath e} ifelse } B/F6/show load def/show{xpdctsop P{/F6 E0}{/stringwidth E0 rmoveto}ifelse}B/F7/ashow load def/ashow{xpdctsop P{/F7 E0}{gsave currentpoint x currentmatrix nulldevice setmatrix moveto/F7 E0 currentpoint grestore moveto}ifelse}B/F8/widthshow load def/widthshow{xpdctsop P{/F8 E0}{gsave currentpoint x currentmatrix nulldevice setmatrix moveto/F8 E0 currentpoint grestore moveto}ifelse}B/F9/awidthshow load def/awidthshow{xpdctsop P{/F9 E0}{gsave currentpoint x currentmatrix nulldevice setmatrix moveto/F9 E0 currentpoint grestore moveto}ifelse}B/F10/kshow load def/kshow{xpdctsop P{/F10 E0}{gsave currentpoint x currentmatrix nulldevice setmatrix moveto/F10 E0 currentpoint grestore moveto}ifelse}B/F11/gsave load def/gsave{ xpdctsop K2 not {A I colorKnkOut put A I 1 add op put /I I 2 add def} if F11 csSave e} B/F12/grestore load def/grestore{ xpdctsop F12 K2 not {  I J gt {/I I 2 sub def} if  /colorKnkOut A I get def /op A I 1 add get def } if T csRestore e} B/F13/grestoreall load def/grestoreall{ xpdctsop F13 K2 not {  /I J def /colorKnkOut A I get def /op A I 1 add get def } if F csRestore e} B/F14/save load def/save{ xpdctsop F14 K2 not {/J I def A I colorKnkOut put A I 1 add op put /I I 2 add def} if e} B/F15 /setcolorspace load def/AreAllZeros{ T exch {0 ne {pop F exit} if} forall} B/ExtractNonSpotColors{ dup length 1 sub 0 1 3 -1 roll {  dup ccs 1 get exch get  IsSpotColor {1 index exch 0 put}{pop} ifelse } for} B/IsSpotColor{ F ccls {2 index eq {pop T exit} if} forall exch pop} B/setcolorspace{ xpdctsop dup type IsArrayType not {[exch]} if /ccs 1 index def count dup /stackCount X array /stackArray X 0 1 stackCount 1 sub {  dup stackCount exch sub index stackArray 3 1 roll put } for {F15} stopped pop clear stackArray aload pop pop e} B/F16 /setcolor load def/makecmyk{ [0 0 0 0] dup 4 2 roll [currentcolor] exch get put aload pop setcmykcolor} B/MakeAndSetProcess{ aload length 1 add -1 roll 3 get exec isHexSep {hcmulf 6 array astore}{4 array astore} ifelse currentProcessPlateIndex get dup 0 eq {pop 0 0 0 0 () 1 setcustc} {  dup /colorKnkOut currentProcessPlateIndex 3 eq epsOvpK and  {exch 1 ne def}{T def pop}  ifelse  setlvl } ifelse} B/hcmulf{ 0 0 0 0 0 0 componentArray {  {10 index mul 7 -1 roll add} forall  10 -1 roll 7 1 roll } forall 10 -4 roll pop pop pop pop 6 {1 2 copy gt {exch} if pop 6 1 roll} repeat} B/MakeCMYKFromAltColor{ GetBaseColorSpace dup 2 get dup type IsArrayType {dup length 1 eq {aload pop} if} if dup /DeviceCMYK eq {pop 3 get exec} {  dup /DeviceRGB eq  {   pop 3 get exec   .11 mul exch .59 mul add exch .3 mul add dup   1 gt {pop 0}{1 exch sub} ifelse   0 0 0 4 -1 roll  }  {   /DeviceGray eq   {3 get exec 0 0 0 4 -1 roll 1 exch sub}   {    (Cannot handle this color space) = ccs == pstack flush    pop 0 0 0 0   }   ifelse  }  ifelse } ifelse} B/SendDeviceNColorToProcessPlates{ dup GetInkNamesArray dup ArrayContainsSeparationsSpotInk exch ArrayContainsNonSeparationsSpotInk {compsArray exch {ExtractNonSpotColors} if MakeAndSetProcess} {  pop GetInkNamesArray 0 exch  {currentProcessPlateColor eq {exit} if 1 add} forall  dup compsArray length ge  {pop 0 0 0 0 () 1 setcustc}  {   compsArray exch get dup   /colorKnkOut currentProcessPlateIndex 3 eq epsOvpK and   {exch 1 ne def}{T def pop}   ifelse   setlvl  }  ifelse } ifelse} B/setcolor{ xpdctsop mark ccs {F15} stopped {cleartomark F}{pop F16 T} ifelse ccs dup 0 get /DeviceN eq {  exch  {   /compsArray [currentcolor] def  }  {   dup 1 get length dup /nComps X 1 add 1 roll   nComps array astore /compsArray X  } ifelse  ccpl length 0 eq  {   currentProcessPlateIndex 0 ge   {    dup 2 get    dup type IsArrayType {0 get} if    /DeviceCMYK ne    {(What to do? No match!) = pstack flush}    {SendDeviceNColorToProcessPlates}    ifelse   }   {pop 0 0 0 0 () 1 setcustc}   ifelse  }  {   dup 1 get 0 F 3 -1 roll   {    ccpl    {1 index eq {exch pop T exch exit} if}    forall    1 index {exch exit}{p2 1 add F} ifelse   } forall   {    compsArray 2 index get 4 -1 roll    1 get length dup array 0 1 4 -1 roll 1 sub    {dup 5 index eq {1}{0} ifelse 2 index 3 1 roll put} for    aload pop MakeCMYKFromAltColor    7 -1 roll pop 6 -2 roll setcustc   }   {    p2 compsArray dup length 1 sub 0 1 3 -1 roll    {1 index exch 0 put}    for    aload pop MakeCMYKFromAltColor () 1 setcustc   }   ifelse  }  ifelse } {  exch pop  dup 0 get /Pattern eq  {pop}  {   dup 0 get /Separation eq   {    1 get dup (All) eq {1 1 1 1}{1 MakeCMYKFromAltColor} ifelse    5 -1 roll currentcolor setcustc   }   {pop currentcmykcolor setcmykcolor}   ifelse  }  ifelse } ifelse e} B/setcustomcolor{ xpdctsop exch dup 4 get /ccn X [/pop load 3 -1 roll aload pop pop 4 {6 index mul 4 1 roll} repeat] cvx [/Separation ccn /DeviceCMYK 5 -1 roll] setcolorspace setcolor e} B/languagelevel where {pop languagelevel}{1} ifelse 3 ge{ /ss69 69 string def /ss12 12 string def /ss16 16 string def /BlendOnPlate false def /SpotPlate false def /deepcopy {  dup dup type IsArrayType exch xcheck not and  {[exch {deepcopy} forall]}  {   dup type /dicttype eq   {    dup length dict exch    {2 index 3 1 roll deepcopy put}    forall   }   if  }  ifelse } B /GetPlateIndex {  (<<) cvx exec 5 0 6 1 7 2 1 3 13 0 14 1 15 2 16 3 17 4 18 5 (>>)  cvx exec epsdict /cc get 2 copy known not  {   pop   isHexSep {16}{1} ifelse   /SpotPlate true def  } if  get } B /SepShading7 {  /SpotPlate false def  dup /Decode 2 copy get aload pop  mark 9 1 roll  isHexSep {0 1 0 1 5}{3} ifelse  GetPlateIndex sub 2 mul {pop} repeat  counttomark 2 roll  GetPlateIndex 2 mul {pop} repeat  3 -1 roll pop  SpotPlate {pop pop 1 1} if  6 array astore put  dup /ColorSpace [/DeviceGray] put  dup /DataSource 2 copy get  [   exch   {    dup ss69 readstring pop    exch ss12 readstring pop pop    isHexSep    {     ss69 65 4 getinterval ss16 0 3 -1 roll putinterval     ss16 4 ss12 putinterval     ss16 CMYKToHex     0 1 3     {      2 copy 6 mul GetPlateIndex add get 255 exch sub ss69      65 4 -1 roll add 3 -1 roll put     }     for     pop    }    {     SpotPlate     {      ss69 65 255 put      ss69 66 255 put      ss69 67 255 put      ss69 68 255 put     }     {      ss69 65 ss69 65 GetPlateIndex add get 255 exch sub put      ss69 66 ss12 GetPlateIndex get 255 exch sub put      ss69 67 ss12 GetPlateIndex 4 add get 255 exch sub put      ss69 68 ss12 GetPlateIndex 8 add get 255 exch sub put     }     ifelse    }    ifelse   }   /exec load  ] cvx bind  0 () /SubFileDecode filter  put } B /modict {  dup /isAlreadyModified known not  {   /BlendOnPlate false def   dup /ColorSpace get   gsave setcolorspace deepcopy   dup /isAlreadyModified true put   dup /ShadingType get 7 eq   {SepShading7}   {    dup /Function get    {     dup /FunctionType get 3 eq     {      /Functions get      {       dup dup /Range known {/Range [0 1] put} {pop} ifelse       dup /FunctionType get       [        {         dup /Decode [0 1] put         dup /Range [0 1] put         dup /DataSource get dup length 4 idiv string         1 index length 1 sub         /SpotPlate false def GetPlateIndex         SpotPlate         {          pop pop dup length 1 sub 0 exch 1 exch          {1 index exch 255 put}          for         }         {          exch 4 exch          {           dup 3 index exch get exch 4 idiv exch           2 index 3 1 roll 255 exch sub put          }          for         }         ifelse         exch pop 1 index exch /DataSource exch put         pop        }        {Unsupported_Function_Type_1}        {         dup /C0 get aload pop setcolor dup         /C0 [currentgray dup 1 lt {/BlendOnPlate true def} if] put         dup /C1 get aload pop setcolor         /C1 [currentgray dup 1 lt {/BlendOnPlate true def} if] put        }        {Unsupported_Function_Type_3}       ] exch get exec      }      forall      dup /ColorSpace [/DeviceGray] put      exit     }     if     dup /FunctionType get 2 eq     {      dup /C0 get aload pop setcolor dup      /C0 [currentgray dup 1 lt {/BlendOnPlate true def} if] put      dup /C1 get aload pop setcolor      /C1 [currentgray dup 1 lt {/BlendOnPlate true def} if] put      dup /ColorSpace [/DeviceGray] put      dup /Function get dup /Range known {/Range [0 1] put}{pop} ifelse      exit     }     if     /FunctionType get 0 eq     {      dup /ColorSpace get dup type IsArrayType      {dup 0 get /DeviceN eq {1 get F}{T} ifelse}      {pop T}      ifelse      {[(Cyan)(Magenta)(Yellow)(Black)]} if      exch      dup /Function get      dup /Range [0 1] put      dup /Decode [0 1] put      dup /Size get 0 get 1 sub 3 1 roll      /DataSource 2 copy get 6 -2 roll 3 -1 roll      makelookup      3 1 roll p2 put      dup /ColorSpace [/DeviceGray] put      exit     }     if     exit    }    loop   }   ifelse   grestore  }  if } B /F17 /shfill load def /shfill {  xpdctsop modict F17 e } B /F18 /makepattern load def /makepattern {  xpdctsop 1 index /Shading known  {   1 index /Shading get modict   2 index /Shading 3 -1 roll put  } if  F18 e } B} if/IsProcessInk{ F processInksArray {2 index eq {pop T exit} if} forall exch pop} B/ArrayContainsSpotInk{ F exch {IsProcessInk not {pop T exit} if} forall} B/ArrayContainsSeparationsSpotInk{ F exch {IsSpotColor {pop T exit} if} forall} B/ArrayContainsNonSeparationsSpotInk{ F exch {dup IsSpotColor exch IsProcessInk or not {pop T exit} if} forall} B/ImageOnPlate{ GetBaseColorSpace 0 get dup dup /DeviceGray eq exch /DeviceRGB eq or {  pop currentProcessPlateIndex 3 eq } {  dup /DeviceCMYK eq  {   pop currentProcessPlateIndex 0 ge  }  {   dup /Separation eq exch /DeviceN eq or   {    F GetBaseColorSpace GetInkNamesArray    ccpl length 0 eq    {     ccls length 0 eq     {      dup ArrayContainsSpotInk      {       pop pop T      }      {       {currentProcessPlateColor eq {pop T exit} if} forall      }      ifelse     }     {      dup F exch      {       dup IsSpotColor not exch IsProcessInk not and       {        pop pop T exit       }       if      }      forall      {       pop T      }      {       {currentProcessPlateColor eq {pop T exit} if} forall      }      ifelse     }     ifelse    }    {     {      F exch ccpl      {       1 index eq {exch pop T exch exit} if      }      forall      pop {pop T exit} if     }     forall    }    ifelse   }   {    T   }   ifelse  }  ifelse } ifelse} B/epsetup{ dup /cc X /qxpcid X /ccls X /ccpl X A 0 F put A 1 T put /CT ctf def /llge3orseps X /hexPlate 0 def dup /isHexSep X {  /currHexPlate X /componentArray X  dup /processInksArray X  {   /hexPlate hexPlate 1 add def   currHexPlate 0 get eq {exit} if  } forall } if /currentProcessPlateIndex -1 def /currentProcessPlateColor () def cc 1 eq {  /setcmykcolor  {   xpdctsop /colorKnkOut epsOvpK {1 index 1 ne}{T} ifelse def setlvl p3 e  } B  /setcolortransfer {xpdctsop 4 1 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 3 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 3 def  /currentProcessPlateColor (Black) def } if cc 5 eq {  /setcmykcolor  {   xpdctsop /colorKnkOut epsOvpK {1 index 1 ne}{T} ifelse def p3 setlvl e  } B  /setcolortransfer {xpdctsop p3 /stf E0} B  /setcolorscreen {xpdctsop p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 0 def  /currentProcessPlateColor (Cyan) def } if cc 6 eq {  /setcmykcolor  {   xpdctsop /colorKnkOut epsOvpK {1 index 1 ne}{T} ifelse def p2 setlvl   pop e  } B  /setcolortransfer {xpdctsop 4 -1 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 -3 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 1 def  /currentProcessPlateColor (Magenta) def } if cc 7 eq {  /setcmykcolor  {   xpdctsop /colorKnkOut epsOvpK {1 index 1 ne}{T} ifelse def pop setlvl   p2 e  } B  /setcolortransfer {xpdctsop 4 2 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 6 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 2 def  /currentProcessPlateColor (Yellow) def } if cc 13 eq hexPlate 1 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse def   p3 p2 setlvl e  } B  /setcolortransfer {xpdctsop p3 /stf E0} B  /setcolorscreen {xpdctsop p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 0 def  /currentProcessPlateColor (Hexachrome Cyan) def } if cc 14 eq hexPlate 2 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse def   p2 p2 setlvl pop e  } B  /setcolortransfer {xpdctsop 4 -1 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 -3 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 1 def  /currentProcessPlateColor (Hexachrome Magenta) def } if cc 15 eq hexPlate 3 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse def   p3 setlvl p2 e  } B  /setcolortransfer {xpdctsop 4 2 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 6 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 2 def  /currentProcessPlateColor (Hexachrome Yellow) def } if cc 16 eq hexPlate 4 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse   def p2 setlvl p3 e  } B  /setcolortransfer {xpdctsop 4 1 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 3 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 3 def  /currentProcessPlateColor (Hexachrome Black) def } if cc 17 eq hexPlate 5 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse   def pop setlvl p2 p2 e  } B  /setcolortransfer {xpdctsop 4 -1 roll p3 /stf E0} B  /setcolorscreen {xpdctsop 12 -3 roll p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 4 def  /currentProcessPlateColor (Hexachrome Orange) def } if cc 18 eq hexPlate 6 eq or {  /setcmykcolor  {   xpdctsop hcmulf /colorKnkOut epsOvpK {3 index 1 ne}{T} ifelse def   setlvl p3 p2 e  } B  /setcolortransfer {xpdctsop p3 /stf E0} B  /setcolorscreen {xpdctsop p3 p3 p3 /setscreen E0} B  /currentProcessPlateIndex 5 def  /currentProcessPlateColor (Hexachrome Green) def } if} B{setpacking} ifend%%EndProcSet%%EndProlog%%BeginSetupQuarkXPress_EPS_7.5 beginpkng{/savepacking currentpacking def true setpacking}if/nf F def .24 /xpys X1 /patfr 1 1 mtx defaultmatrix dtransform pop abs dup 72 mul 4 -1 roll div exch .5 add cvi 8 mul dup 8 lt{pop 8}if div def/psx 12 def/psy 12 def/sa 0 def/ss F def/curf 0 def/xpfs 0 def/doss F def/pnm 1 def/minblnd 16 def/ulpmax .2 def/ultmax .2 def/custar 5 array def/custarrgb 4 array def/custsh 0 def/regsh -1 def/xpxs 1 def/ovp F def/trp 0 def/ns F def/nochp F def/nochdev F def/ff F def/vtd F def/custprsnt F def/ih [currentdash] def/xpwd 5 dict def/fmtx matrix def/far 512 array def/sa8 8 string def/sb8 8 string def/sc8 8 string def/sd8 8 string def/chc (\1) def/s1 ( ) def/s75 75 string def/str 256 string def/ct0 (\0\0) def/ct1 100 string def ct1 99 0 put/ctp {} def/bkc (\0abcd) def/bkc2 [[1] /DeviceGray] def/fg (\0) def/custnamstr 80 string def/xpReversePath F def/xpdctopn [currentdict /begin load] cvx B/clrspusd 1 def/frame{X 4 index div add 3 1 roll 5 index div add 2 array astore 10 1 roll
 div 3 1 roll div 2 array astore 7 1 roll pop pop 2 index 0 0 4 index 0 0 mtx astore}B/buildframel {5 array astore 3 1 roll 0 index aload pop t 1 index aload pop S}def/drawhorizframel {2 index aload pop imagemask 1 0 t}def/drawvertframel {2 index aload pop imagemask 0 1 t}def/rdstr{ mark 3 1 roll {  [   {currentfile} aload pop   2 index string {readstring pop} aload pop  ]  cvx bind exch } repeat pop counttomark 1 eq{  exch pop }{  counttomark array astore  exch pop }ifelse} B/ReadDeviceNtoCMYK{ {  3 copy  [   4 1 roll   1 index string {currentfile} aload pop   2 index string   {    readstring pop [exch {255 div} forall]    4 string 0 6 index 6 -1 roll 1 sub    {     2 index 1 index 7 index getinterval     aload pop TintTransformToCMYK     5 index 3 -1 0     {1 index exch 4 -1 roll 255 mul cvi put}     for     4 index 3 -1 roll 4 mul 7 index idiv     3 -1 roll putinterval    }    for    pop pop 3 1 roll pop pop   }   aload pop  ]  cvx bind 4 1 roll } repeat pop pop pop} B/isgrayspace{ /qxpcid where {/qxpcid get 0 gt}{F} ifelse} B/setcustomcolor where{ pop /dogray {  isgrayspace  {pop T}  {   gsave   4 get [.5 .5 .5 0 6 -1 roll] .5 setcustomcolor   {currentcolorspace} stopped   {currentgray dup 1 eq exch 0 eq or}   {    0 get /Separation eq {currentcolor}{currentgray} ifelse    dup 1 eq exch 0 eq or   }   ifelse   grestore  }  ifelse } B}{ /dogray {pop isgrayspace} B /setcustomcolor {  exch aload pop 6 -1 roll setcustcsep } B} ifelse/setcustomcolorrgb{ exch aload p2 3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat setrgbcolor pop} B/rgbmulf{ [  4 -1 roll dup 1 eq  {pop 1 exchL}  {   dup 0 eq   {pop dupL 1 exchL subL exchL}   {dupL exch 1 exch sub mulL 1 exchL subL exchL}   ifelse  }  ifelse  counttomark 3 add -1 roll dup 1 eq  {pop 1 exchL}  {   dup 0 eq   {pop dupL 1 exchL subL exchL}   {dupL exch 1 exch sub mulL 1 exchL subL exchL}   ifelse  }  ifelse  counttomark 2 add -1 roll dup 1 eq  {pop popL 1}  {   dup 0 eq   {pop 1 exchL subL}   {1 exch sub mulL 1 exchL subL}   ifelse  }  ifelse ] cvx bind} B/labmulf{ [  4 -1 roll dup 1 ne  {   dup 0 eq   {pop dupL}   {dupL exch 1 exch sub mulL}   ifelse   1 exchL subL  }  if  exchL  counttomark 3 add -1 roll  .501961 sub dup 0 eq  {pop .501961}  {dupL exch mulL .501961 addL}  ifelse  exchL  counttomark 2 add -1 roll  .501961 sub dup 0 eq  {pop popL .501961}  {mulL .501961 addL}  ifelse ] cvx bind} B/setspotcolorrgb{ exch aload pop [/Separation 3 -1 roll /DeviceRGB 7 -3 roll rgbmulf] setcolorspace setcolor} B/setcustc{ /custprsnt T def /regsh -1 def /custsh X dup length custnamstr dup 79 3 index put 0 3 -1 roll getinterval copy custar astore custsh setcustomcolor} B/setcustcrgb{ /custprsnt T def /regsh -1 def /custsh X dup length custnamstr dup 79 3 index put 0 3 -1 roll getinterval copy custarrgb astore custsh llge2 {setspotcolorrgb}{setcustomcolorrgb} ifelse} B/findcmykcustomcolor where{pop}{/findcmykcustomcolor {5 array astore readonly} B} ifelse/setoverprint where {pop}{/setoverprint {pop} B} ifelse/setseparationgray where{ pop /doregblnd T def /sepgr {setseparationgray} B /setregcolor {  /custprsnt F def  5 1 roll p4 1 exch sub dup /regsh X  setseparationgray } B}{ /doregblnd F def /sepgr systemdict /setgray get def /setregcolor {/custprsnt F def pop setcmykcolor} B} ifelse/cmykmulf{ [  5 -1 roll dup 1 eq  {pop dupL}  {   dup 0 eq   {pop 0 exchL}   {dupL exch mulL exchL}   ifelse  }  ifelse  counttomark 4 add -1 roll dup 1 eq  {pop dupL}  {   dup 0 eq   {pop 0 exchL}   {dupL exch mulL exchL}   ifelse  }  ifelse  counttomark 3 add -1 roll dup 1 eq  {pop dupL}  {   dup 0 eq   {pop 0 exchL}   {dupL exch mulL exchL}   ifelse  }  ifelse  counttomark 2 add -1 roll dup 1 eq  {pop}  {   dup 0 eq   {pop popL 0}   {mulL}   ifelse  }  ifelse ] cvx bind} B/setcustcsep{ llge2 {  6 1 roll  [/Separation 3 -1 roll /DeviceCMYK 8 4 roll cmykmulf]  setcolorspace setcolor } {setcustc} ifelse} B/SetRegistrationColor{ /custprsnt F def [/Separation (All) /DeviceGray {1 exch sub} bind] setcolorspace setcolor} B/inkmul{ array astore{1 index mul exch}forall pop}B/dntocmykf{ [  exch dup length 0 0 0 0 4 index 4 add 4 rollL  9 -2 roll dup 1 sub 3 -1 roll  {   3 exch   {    dup 0 eq    {     pop    }    {     dup 1 eq     {      pop 1 index indexL 2 index 5 index add 2 add -1 rollL      addL 6 index 9 index add 1 add 1 rollL 12 -3 roll     }     {      2 index 1 add indexL mulL 4 index 7 index add 2 add -1 rollL      addL 8 index 11 index add 1 add 1 rollL 14 -3 roll     } ifelse    } ifelse    1 sub   } forall pop 1 sub  } forall pop {popL} repeat  4 {dupL 1 gtL {pop 1} ifL 4 1 rollL} repeat ] cvx bind dup /TintTransformToCMYK X} B/gendn{ dup length 3 1 roll mark 3 index 5 add 3 roll inkmul counttomark 3 add -3 roll pop llge3orseps {  [/DeviceN 3 -1 roll /DeviceCMYK 5 -1 roll dntocmykf]  setcolorspace setcolor } {pop dntocmykf exec C} ifelse} B/gendncs{ llge3orseps {[/DeviceN 3 -1 roll/DeviceCMYK 5 -1 roll dntocmykf]} {pop dntocmykf pop /DeviceCMYK} ifelse} B/genspotrgb{ [/Separation 3 -1 roll /DeviceRGB 5 -1 roll aload pop rgbmulf] setcolorspace setcolor} B/genspotlab{ [/Separation 3 -1 roll LABColorSpace 5 -1 roll aload pop labmulf] setcolorspace setcolor} B/GenSepCSAltCMYK{ [  /Separation 3 -1 roll /DeviceCMYK 5 -1 roll dntocmykf ]} B/GenSepCSAltRGB{ [  /Separation 3 -1 roll /DeviceRGB 5 -1 roll  aload pop rgbmulf ]} B/GenSepCSAltLab{ [  /Separation 3 -1 roll LABColorSpace 5 -1 roll  aload pop labmulf ]} B/colorimage where{pop/clrimg{colorimage}def} {/proc{/i 0 def/j 0 def cmy{prc prm pry prk dup/tmpstr X} {prk dup dup length 3 idiv 0 exch getinterval/tmpstr X tmpstr}ifelse {cmy{1 index i get 3 index i get add 4 index i get add 3 div 255 2 index sub 255 div mul add round cvi 255 exch sub 1} {pop dup i 3 getinterval{}forall .11 mul exch .59 mul add exch .3 mul add round cvi 3}ifelse i add/i X tmpstr j 3 -1 roll put/j j 1 add def}forall cmy{p3}{pop}ifelse tmpstr}B /clrimg{4 eq/cmy X pop/prk X cmy{/pry X/prm X/prc X}if/proc load image}B}ifelse/stf systemdict/settransfer get def/ctf systemdict/currenttransfer get defsystemdict/setcolortransfer known{/cstf systemdict/setcolortransfer get def}if/cmykprsnt /currentcmykcolor where{pop T}{F}ifelse def/setcmykcolor where{pop} {/setcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt {pop 0}if 3 1 roll}repeat R pop}B}ifelse/C/setcmykcolor load def/stovp0 /setoverprint where {/setoverprint get}{{pop}} ifelse def/stovpm /setoverprintmode where{/setoverprintmode get}{{pop}}ifelse def/stovp {dup /ovp X stovp0 T stovpm} B/sttrp0/settrap where{/settrap get}{{pop}}ifelse def/sttrp{dup/trp X sttrp0}B/setcolorscreen where{pop/docpat where{pop}{/docpat T def}ifelse} {/docpat F def/setcolorscreen{setscreen 9{pop}repeat}B}ifelse/xpscrn{dup not{pop currentscreen dup xcheck{T} {9 index 8 index and{60 0 sp0 T 7 -3 roll 3}{F 10 1 roll 9}ifelse {pop}repeat}ifelse dup{pop 3{5 -2 roll{exch}if pop 3 1 roll}repeat T}if}if {setscreen}if p2}B/xpcscrn{dup not{pop/currentcolorscreen where{pop currentcolorscreen dup xcheck not{36 T}{F}ifelse}{24 T}ifelse{{pop}repeat F} {12{14 -2 roll{exch}if pop 12 1 roll}repeat T}ifelse}if{setcolorscreen}if}B/HalftoneDict 0 dict def/CreateHalftoneDict{HalftoneDict begin /HalftoneType 5 def 4 dict begin /HalftoneType 1 def /Frequency 150 def /Angle 45 def /SpotFunction sp0 def currentdict end /Default exch def end}B/AddHalftoneToDict {HalftoneDict begin 4 dict begin /SpotFunction X /Angle X /Frequency X /HalftoneType 1 def currentdict end def end}B/GetSeparationState{currentpagedevice /Separations get}B/ImageDict 8 dict def/CreateImageDict{ ImageDict /MultipleDataSources undef ImageDict begin /Decode X dup xcheck not {/MultipleDataSources true def} if /DataSource X /ImageMatrix exch /product where {/product get}{(Unknown)} ifelse (Jaws PDF Creator) eq {  matrix currentmatrix  1 index 0 get 3 le  {   2 copy 0 get 1 index 0 get div   dup abs .5 ge {0 lt {-.5}{.5} ifelse} if   0 exch put   1 index dup 4 get 4 exch .45 add put  }  if  1 index 3 get 3 le  {   2 copy 3 get 1 index 3 get div   dup abs .5 ge {0 lt {-.5}{.5} ifelse} if   3 exch put   1 index dup 5 get 5 exch .45 add put  }  if  pop } if def /BitsPerComponent X /Height X /Width X /ImageType 1 def end} B/q/Symbol findfont dup maxlength dict begin cf/Encoding xpv def currentdict end definefont dup/sym X/q -1 3 -1 roll newmm/symf X p2/CT ctf def%%BeginResource: font LinotypeUnivers-ExtdXBlack%!PS-AdobeFont-1.0: LinotypeUnivers-ExtdXBlack 001.000%%CreationDate: 11.12.1997 at 16:31 Uhr%%VMusage: 1024 36200  % 040000.17017146_20.01.99/0103_V% The digitally encoded machine readable outline data for producing the Typefaces licensed to you is copyrighted \(C\), 1997 by and the property of Linotype-Hell AG and/or its subsidiaries. All Rights Reserved.Copyright \(c\) 1990 Adobe Systems Incorporated.% ADL: 789 211 0%%EndCommentsFontDirectory/LinotypeUnivers-ExtdXBlack known{/LinotypeUnivers-ExtdXBlack findfont dup/UniqueID known{dup/UniqueID get 995000 eq exch/FontType get 1 eq and}{pop false}ifelse{save true}{false}ifelse}{false}ifelse20 dict begin/FontInfo 16 dict dup begin  /version (001.000) readonly def  /FullName (LinotypeUnivers-ExtdXBlack) readonly def  /FamilyName (LinotypeUnivers) readonly def  /Weight (ExtdXBlack) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -100 def  /UnderlineThickness 50 def  /Notice (The digitally encoded machine readable outline data for producing the Typefaces licensed to you is copyrighted \(C\), 1997 by and the property of Linotype-Hell AG and/or its subsidiaries. All Rights Reserved.Copyright \(c\) 1990 Adobe Systems Incorporated.) readonly def  /em 1000 def  /ascent 789 def  /descent 211 defend readonly def/FontName /LinotypeUnivers-ExtdXBlack def/Encoding 256 arraydup 0/NUL putdup 1/Eth putdup 2/eth putdup 3/Lslash putdup 4/lslash putdup 5/Scaron putdup 6/scaron putdup 7/Yacute putdup 8/yacute putdup 9/HT putdup 10/LF putdup 11/Thorn putdup 12/thorn putdup 13/CR putdup 14/Zcaron putdup 15/zcaron putdup 16/DLE putdup 17/DC1 putdup 18/DC2 putdup 19/DC3 putdup 20/DC4 putdup 21/onehalf putdup 22/onequarter putdup 23/onesuperior putdup 24/threequarters putdup 25/threesuperior putdup 26/twosuperior putdup 27/brokenbar putdup 28/minus putdup 29/multiply putdup 30/RS putdup 31/US putdup 32/space putdup 33/exclam putdup 34/quotedbl putdup 35/numbersign putdup 36/dollar putdup 37/percent putdup 38/ampersand putdup 39/quotesingle putdup 40/parenleft putdup 41/parenright putdup 42/asterisk putdup 43/plus putdup 44/comma putdup 45/hyphen putdup 46/period putdup 47/slash putdup 48/zero putdup 49/one putdup 50/two putdup 51/three putdup 52/four putdup 53/five putdup 54/six putdup 55/seven putdup 56/eight putdup 57/nine putdup 58/colon putdup 59/semicolon putdup 60/less putdup 61/equal putdup 62/greater putdup 63/question putdup 64/at putdup 65/A putdup 66/B putdup 67/C putdup 68/D putdup 69/E putdup 70/F putdup 71/G putdup 72/H putdup 73/I putdup 74/J putdup 75/K putdup 76/L putdup 77/M putdup 78/N putdup 79/O putdup 80/P putdup 81/Q putdup 82/R putdup 83/S putdup 84/T putdup 85/U putdup 86/V putdup 87/W putdup 88/X putdup 89/Y putdup 90/Z putdup 91/bracketleft putdup 92/backslash putdup 93/bracketright putdup 94/asciicircum putdup 95/underscore putdup 96/grave putdup 97/a putdup 98/b putdup 99/c putdup 100/d putdup 101/e putdup 102/f putdup 103/g putdup 104/h putdup 105/i putdup 106/j putdup 107/k putdup 108/l putdup 109/m putdup 110/n putdup 111/o putdup 112/p putdup 113/q putdup 114/r putdup 115/s putdup 116/t putdup 117/u putdup 118/v putdup 119/w putdup 120/x putdup 121/y putdup 122/z putdup 123/braceleft putdup 124/bar putdup 125/braceright putdup 126/asciitilde putdup 127/DEL putdup 128/Adieresis putdup 129/Aring putdup 130/Ccedilla putdup 131/Eacute putdup 132/Ntilde putdup 133/Odieresis putdup 134/Udieresis putdup 135/aacute putdup 136/agrave putdup 137/acircumflex putdup 138/adieresis putdup 139/atilde putdup 140/aring putdup 141/ccedilla putdup 142/eacute putdup 143/egrave putdup 144/ecircumflex putdup 145/edieresis putdup 146/iacute putdup 147/igrave putdup 148/icircumflex putdup 149/idieresis putdup 150/ntilde putdup 151/oacute putdup 152/ograve putdup 153/ocircumflex putdup 154/odieresis putdup 155/otilde putdup 156/uacute putdup 157/ugrave putdup 158/ucircumflex putdup 159/udieresis putdup 160/dagger putdup 161/degree putdup 162/cent putdup 163/sterling putdup 164/section putdup 165/bullet putdup 166/paragraph putdup 167/germandbls putdup 168/registered putdup 169/copyright putdup 170/trademark putdup 171/acute putdup 172/dieresis putdup 173/notequal putdup 174/AE putdup 175/Oslash putdup 176/infinity putdup 177/plusminus putdup 178/lessequal putdup 179/greaterequal putdup 180/yen putdup 181/mu putdup 182/partialdiff putdup 183/summation putdup 184/product putdup 185/pi putdup 186/integral putdup 187/ordfeminine putdup 188/ordmasculine putdup 189/Omega putdup 190/ae putdup 191/oslash putdup 192/questiondown putdup 193/exclamdown putdup 194/logicalnot putdup 195/radical putdup 196/florin putdup 197/approxequal putdup 198/Delta putdup 199/guillemotleft putdup 200/guillemotright putdup 201/ellipsis putdup 202/nbspace putdup 203/Agrave putdup 204/Atilde putdup 205/Otilde putdup 206/OE putdup 207/oe putdup 208/endash putdup 209/emdash putdup 210/quotedblleft putdup 211/quotedblright putdup 212/quoteleft putdup 213/quoteright putdup 214/divide putdup 215/lozenge putdup 216/ydieresis putdup 217/Ydieresis putdup 218/fraction putdup 219/currency putdup 220/guilsinglleft putdup 221/guilsinglright putdup 222/fi putdup 223/fl putdup 224/daggerdbl putdup 225/periodcentered putdup 226/quotesinglbase putdup 227/quotedblbase putdup 228/perthousand putdup 229/Acircumflex putdup 230/Ecircumflex putdup 231/Aacute putdup 232/Edieresis putdup 233/Egrave putdup 234/Iacute putdup 235/Icircumflex putdup 236/Idieresis putdup 237/Igrave putdup 238/Oacute putdup 239/Ocircumflex putdup 240/apple putdup 241/Ograve putdup 242/Uacute putdup 243/Ucircumflex putdup 244/Ugrave putdup 245/dotlessi putdup 246/circumflex putdup 247/tilde putdup 248/macron putdup 249/breve putdup 250/dotaccent putdup 251/ring putdup 252/cedilla putdup 253/hungarumlaut putdup 254/ogonek putdup 255/caron put readonly def/PaintType 0 def/FontType 1 def/StrokeWidth 0 def/FontMatrix[0.001 0 0 0.001 0 0]readonly def/UniqueID 995000 def/FontBBox{-221 -235 1575 957}readonly defcurrentdict endcurrentfile eexec00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndResource0 /Encoding [ /.notdef /space /hyphen /A /B /E /F /G /I /L /M /N /O /R /S /T /U /X  /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef ] def Encoding 1 F 0 /|____LinotypeUnivers-ExtdXBlack 0 dfnt/epsmtx matrix currentmatrix defpkng{savepacking setpacking}ifend%%EndSetupQuarkXPress_EPS_7.5 begin0 -311.811 1 dup neg S t1 setchc 0 sttrp F stovpF/ss X 1 1 pen 0 H 0 a 0 b[] 0 pcalcbnd/custprsnt F def -1/regsh X0 0 0 1 C/setstrokeadjust where{pop F setstrokeadjust}ifg -440 -37 t (37 440 348.811 879.37 F rc u)kpg np clippath 1 H V G0 .85 1 0 C%%BeginObject: rect51.173 454.173 181.567 865.197 F rc V%%EndObject/custprsnt F def -1/regsh X0 .85 1 0 C0 .85 1 0 C%%BeginObject: text0 47 47 f450.4681 228.3407 m <0D0C0E03>[45.12 0 48.457 0 43.898 0 50.854 0 ]XPxyshow%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z450.7029 280.3407 m <09>M%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z482.42 280.3407 m <1011>[46.4831 0 50.6191 0 ]XPxyshow%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z579.5223 280.3407 m <050A>[38.9628 0 65.1888 0 ]XPxyshow%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z683.6739 280.3407 m <04100D07>[43.1878 0 46.4831 0 44.8851 0 49.3031 0 ]XPxyshow%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z450.9378 332.3407 m <0E0F08>[43.898 0 36.989 0 21.009 0 ]XPxyshow%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z552.8338 332.3407 m <06>M%%EndObject0 .85 1 0 C%%BeginObject: text47 47 Z590.0105 332.3407 m <0F100B07>[36.989 0 46.718 0 51.606 0 49.538 0 ]XPxyshow%%EndObjectEndTextBoxG endshowpage%%Trailer%%DocumentSuppliedResources: font LinotypeUnivers-ExtdXBlack